(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Parameter create_fn : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_create_fn :
  M.IsFunction "functions_closures_as_output_parameters::create_fn" create_fn.
Smpl Add apply Function_create_fn : is_function.

Module create_fn.
  (* Error OpaqueTy *)
End create_fn.

Parameter create_fnmut : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_create_fnmut :
  M.IsFunction "functions_closures_as_output_parameters::create_fnmut" create_fnmut.
Smpl Add apply Function_create_fnmut : is_function.

Module create_fnmut.
  (* Error OpaqueTy *)
End create_fnmut.

Parameter create_fnonce : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_create_fnonce :
  M.IsFunction "functions_closures_as_output_parameters::create_fnonce" create_fnonce.
Smpl Add apply Function_create_fnonce : is_function.

Module create_fnonce.
  (* Error OpaqueTy *)
End create_fnonce.

Parameter main : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "functions_closures_as_output_parameters::main" main.
Smpl Add apply Function_main : is_function.
