(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module evm.
  (* StructRecord
    {
      name := "Evm";
      const_params := [];
      ty_params := [ "ERROR"; "CTX"; "HANDLER" ];
      fields :=
        [
          ("context", CTX);
          ("handler", HANDLER);
          ("_error", Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.function [] ERROR ])
        ];
    } *)
  
  Module Impl_revm_evm_Evm_ERROR_CTX_HANDLER.
    Definition Self (ERROR CTX HANDLER : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm::evm::Evm") [] [ ERROR; CTX; HANDLER ].
    
    (*
        pub fn new(context: CTX, handler: HANDLER) -> Self {
            Self {
                context,
                handler,
                _error: core::marker::PhantomData,
            }
        }
    *)
    Definition new
        (ERROR CTX HANDLER : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX HANDLER in
      match ε, τ, α with
      | [], [], [ context; handler ] =>
        ltac:(M.monadic
          (let context := M.alloc (| context |) in
          let handler := M.alloc (| handler |) in
          Value.StructRecord
            "revm::evm::Evm"
            [
              ("context", M.read (| context |));
              ("handler", M.read (| handler |));
              ("_error", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_new :
      forall (ERROR CTX HANDLER : Ty.t),
      M.IsAssociatedFunction (Self ERROR CTX HANDLER) "new" (new ERROR CTX HANDLER).
  End Impl_revm_evm_Evm_ERROR_CTX_HANDLER.
  
  Module Impl_revm_exec_EvmCommit_where_revm_context_interface_transaction_TransactionSetter_CTX_where_revm_context_interface_block_BlockSetter_CTX_where_revm_context_interface_journaled_state_JournalGetter_CTX_where_revm_context_interface_cfg_CfgGetter_CTX_where_revm_database_interface_DatabaseGetter_CTX_where_revm_context_interface_errors_ErrorGetter_CTX_where_revm_context_interface_journaled_state_JournalGetter_CTX_where_revm_context_interface_host_Host_CTX_where_core_convert_From_ERROR_revm_context_interface_result_InvalidTransaction_where_core_convert_From_ERROR_revm_context_interface_result_InvalidHeader_where_core_convert_From_ERROR_associated_type_where_core_convert_From_ERROR_revm_precompile_interface_PrecompileErrors_where_revm_handler_interface_validation_ValidationHandler_VAL_where_revm_handler_interface_pre_execution_PreExecutionHandler_PREEXEC_where_revm_handler_interface_execution_ExecutionHandler_EXEC_where_revm_handler_interface_post_execution_PostExecutionHandler_POSTEXEC_where_revm_context_interface_result_HaltReasonTrait_HALT_for_revm_evm_Evm_ERROR_CTX_revm_handler_EthHandler_CTX_ERROR_VAL_PREEXEC_EXEC_POSTEXEC.
    Definition Self (ERROR CTX VAL PREEXEC EXEC POSTEXEC HALT : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "revm::evm::Evm")
        []
        [
          ERROR;
          CTX;
          Ty.apply
            (Ty.path "revm_handler::EthHandler")
            []
            [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
        ].
    
    (*     type CommitOutput = Result<ExecutionResult<HALT>, ERROR>; *)
    Definition _CommitOutput (ERROR CTX VAL PREEXEC EXEC POSTEXEC HALT : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "core::result::Result")
        []
        [ Ty.apply (Ty.path "revm_context_interface::result::ExecutionResult") [] [ HALT ]; ERROR ].
    
    (*
        fn exec_commit(&mut self) -> Self::CommitOutput {
            let res = self.transact();
            res.map(|r| {
                self.context.db().commit(r.state);
                r.result
            })
        }
    *)
    Definition exec_commit
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC HALT : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC HALT in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ res :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "revm::evm::Evm")
                      []
                      [
                        ERROR;
                        CTX;
                        Ty.apply
                          (Ty.path "revm_handler::EthHandler")
                          []
                          [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                      ],
                    "transact",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "revm_context_interface::result::ResultAndState")
                        []
                        [ HALT ];
                      ERROR
                    ],
                  "map",
                  [],
                  [
                    Ty.apply
                      (Ty.path "revm_context_interface::result::ExecutionResult")
                      []
                      [ HALT ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "revm_context_interface::result::ResultAndState")
                              []
                              [ HALT ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "revm_context_interface::result::ExecutionResult")
                        []
                        [ HALT ])
                  ]
                |),
                [
                  M.read (| res |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let r := M.copy (| γ |) in
                                    M.read (|
                                      let~ _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_database_interface::DatabaseCommit",
                                              Ty.associated,
                                              [],
                                              [],
                                              "commit",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "revm_database_interface::DatabaseGetter",
                                                      CTX,
                                                      [],
                                                      [],
                                                      "db",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "revm::evm::Evm",
                                                          "context"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  r,
                                                  "revm_context_interface::result::ResultAndState",
                                                  "state"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.SubPointer.get_struct_record_field (|
                                        r,
                                        "revm_context_interface::result::ResultAndState",
                                        "result"
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (ERROR CTX VAL PREEXEC EXEC POSTEXEC HALT : Ty.t),
      M.IsTraitInstance
        "revm::exec::EvmCommit"
        (Self ERROR CTX VAL PREEXEC EXEC POSTEXEC HALT)
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("CommitOutput",
            InstanceField.Ty (_CommitOutput ERROR CTX VAL PREEXEC EXEC POSTEXEC HALT));
          ("exec_commit",
            InstanceField.Method (exec_commit ERROR CTX VAL PREEXEC EXEC POSTEXEC HALT))
        ].
  End Impl_revm_exec_EvmCommit_where_revm_context_interface_transaction_TransactionSetter_CTX_where_revm_context_interface_block_BlockSetter_CTX_where_revm_context_interface_journaled_state_JournalGetter_CTX_where_revm_context_interface_cfg_CfgGetter_CTX_where_revm_database_interface_DatabaseGetter_CTX_where_revm_context_interface_errors_ErrorGetter_CTX_where_revm_context_interface_journaled_state_JournalGetter_CTX_where_revm_context_interface_host_Host_CTX_where_core_convert_From_ERROR_revm_context_interface_result_InvalidTransaction_where_core_convert_From_ERROR_revm_context_interface_result_InvalidHeader_where_core_convert_From_ERROR_associated_type_where_core_convert_From_ERROR_revm_precompile_interface_PrecompileErrors_where_revm_handler_interface_validation_ValidationHandler_VAL_where_revm_handler_interface_pre_execution_PreExecutionHandler_PREEXEC_where_revm_handler_interface_execution_ExecutionHandler_EXEC_where_revm_handler_interface_post_execution_PostExecutionHandler_POSTEXEC_where_revm_context_interface_result_HaltReasonTrait_HALT_for_revm_evm_Evm_ERROR_CTX_revm_handler_EthHandler_CTX_ERROR_VAL_PREEXEC_EXEC_POSTEXEC.
  
  Module Impl_revm_exec_EvmExec_where_revm_context_interface_transaction_TransactionSetter_CTX_where_revm_context_interface_block_BlockSetter_CTX_where_revm_context_interface_journaled_state_JournalGetter_CTX_where_revm_context_interface_cfg_CfgGetter_CTX_where_revm_database_interface_DatabaseGetter_CTX_where_revm_context_interface_errors_ErrorGetter_CTX_where_revm_context_interface_journaled_state_JournalGetter_CTX_where_revm_context_interface_host_Host_CTX_where_core_convert_From_ERROR_revm_context_interface_result_InvalidTransaction_where_core_convert_From_ERROR_revm_context_interface_result_InvalidHeader_where_core_convert_From_ERROR_associated_type_where_core_convert_From_ERROR_revm_precompile_interface_PrecompileErrors_where_revm_handler_interface_validation_ValidationHandler_VAL_where_revm_handler_interface_pre_execution_PreExecutionHandler_PREEXEC_where_revm_handler_interface_execution_ExecutionHandler_EXEC_where_revm_handler_interface_post_execution_PostExecutionHandler_POSTEXEC_for_revm_evm_Evm_ERROR_CTX_revm_handler_EthHandler_CTX_ERROR_VAL_PREEXEC_EXEC_POSTEXEC.
    Definition Self (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "revm::evm::Evm")
        []
        [
          ERROR;
          CTX;
          Ty.apply
            (Ty.path "revm_handler::EthHandler")
            []
            [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
        ].
    
    (*     type Transaction = <CTX as TransactionGetter>::Transaction; *)
    Definition _Transaction (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t) : Ty.t := Ty.associated.
    
    (*     type Block = <CTX as BlockGetter>::Block; *)
    Definition _Block (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t) : Ty.t := Ty.associated.
    
    (*     type Output = Result<<POSTEXEC as PostExecutionHandler>::Output, ERROR>; *)
    Definition _Output (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::result::Result") [] [ Ty.associated; ERROR ].
    
    (*
        fn set_block(&mut self, block: Self::Block) {
            self.context.set_block(block);
        }
    *)
    Definition set_block
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self; block ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block := M.alloc (| block |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "revm_context_interface::block::BlockSetter",
                    CTX,
                    [],
                    [],
                    "set_block",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm::evm::Evm",
                        "context"
                      |)
                    |);
                    M.read (| block |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn set_tx(&mut self, tx: Self::Transaction) {
            self.context.set_tx(tx);
        }
    *)
    Definition set_tx
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self; tx ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let tx := M.alloc (| tx |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "revm_context_interface::transaction::TransactionSetter",
                    CTX,
                    [],
                    [],
                    "set_tx",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm::evm::Evm",
                        "context"
                      |)
                    |);
                    M.read (| tx |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn exec(&mut self) -> Self::Output {
            self.transact()
        }
    *)
    Definition exec
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "revm::evm::Evm")
                []
                [
                  ERROR;
                  CTX;
                  Ty.apply
                    (Ty.path "revm_handler::EthHandler")
                    []
                    [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                ],
              "transact",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t),
      M.IsTraitInstance
        "revm::exec::EvmExec"
        (Self ERROR CTX VAL PREEXEC EXEC POSTEXEC)
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Transaction", InstanceField.Ty (_Transaction ERROR CTX VAL PREEXEC EXEC POSTEXEC));
          ("Block", InstanceField.Ty (_Block ERROR CTX VAL PREEXEC EXEC POSTEXEC));
          ("Output", InstanceField.Ty (_Output ERROR CTX VAL PREEXEC EXEC POSTEXEC));
          ("set_block", InstanceField.Method (set_block ERROR CTX VAL PREEXEC EXEC POSTEXEC));
          ("set_tx", InstanceField.Method (set_tx ERROR CTX VAL PREEXEC EXEC POSTEXEC));
          ("exec", InstanceField.Method (exec ERROR CTX VAL PREEXEC EXEC POSTEXEC))
        ].
  End Impl_revm_exec_EvmExec_where_revm_context_interface_transaction_TransactionSetter_CTX_where_revm_context_interface_block_BlockSetter_CTX_where_revm_context_interface_journaled_state_JournalGetter_CTX_where_revm_context_interface_cfg_CfgGetter_CTX_where_revm_database_interface_DatabaseGetter_CTX_where_revm_context_interface_errors_ErrorGetter_CTX_where_revm_context_interface_journaled_state_JournalGetter_CTX_where_revm_context_interface_host_Host_CTX_where_core_convert_From_ERROR_revm_context_interface_result_InvalidTransaction_where_core_convert_From_ERROR_revm_context_interface_result_InvalidHeader_where_core_convert_From_ERROR_associated_type_where_core_convert_From_ERROR_revm_precompile_interface_PrecompileErrors_where_revm_handler_interface_validation_ValidationHandler_VAL_where_revm_handler_interface_pre_execution_PreExecutionHandler_PREEXEC_where_revm_handler_interface_execution_ExecutionHandler_EXEC_where_revm_handler_interface_post_execution_PostExecutionHandler_POSTEXEC_for_revm_evm_Evm_ERROR_CTX_revm_handler_EthHandler_CTX_ERROR_VAL_PREEXEC_EXEC_POSTEXEC.
  
  Axiom Error :
    forall (DB : Ty.t),
    (Ty.apply (Ty.path "revm::evm::Error") [] [ DB ]) =
      (Ty.apply
        (Ty.path "revm_context_interface::result::EVMError")
        []
        [ Ty.associated; Ty.path "revm_context_interface::result::InvalidTransaction" ]).
  
  Axiom EthContext :
    forall (DB BLOCK TX CFG JOURNAL : Ty.t),
    (Ty.apply (Ty.path "revm::evm::EthContext") [] [ DB; BLOCK; TX; CFG; JOURNAL ]) =
      (Ty.apply
        (Ty.path "revm_context::context::Context")
        []
        [ BLOCK; TX; CFG; DB; JOURNAL; Ty.tuple [] ]).
  
  Axiom MainEvm :
    forall (DB BLOCK TX CFG : Ty.t),
    (Ty.apply (Ty.path "revm::evm::MainEvm") [] [ DB; BLOCK; TX; CFG ]) =
      (Ty.apply
        (Ty.path "revm::evm::Evm")
        []
        [
          Ty.apply
            (Ty.path "revm_context_interface::result::EVMError")
            []
            [ Ty.associated; Ty.path "revm_context_interface::result::InvalidTransaction" ];
          Ty.apply
            (Ty.path "revm_context::context::Context")
            []
            [
              BLOCK;
              TX;
              CFG;
              DB;
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ];
              Ty.tuple []
            ];
          Ty.apply
            (Ty.path "revm_handler::EthHandler")
            []
            [
              Ty.apply
                (Ty.path "revm_context::context::Context")
                []
                [
                  BLOCK;
                  TX;
                  CFG;
                  DB;
                  Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ];
                  Ty.tuple []
                ];
              Ty.apply
                (Ty.path "revm_context_interface::result::EVMError")
                []
                [ Ty.associated; Ty.path "revm_context_interface::result::InvalidTransaction" ];
              Ty.apply
                (Ty.path "revm_handler::validation::EthValidation")
                []
                [
                  Ty.apply
                    (Ty.path "revm_context::context::Context")
                    []
                    [
                      BLOCK;
                      TX;
                      CFG;
                      DB;
                      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ];
                      Ty.tuple []
                    ];
                  Ty.apply
                    (Ty.path "revm_context_interface::result::EVMError")
                    []
                    [ Ty.associated; Ty.path "revm_context_interface::result::InvalidTransaction" ]
                ];
              Ty.apply
                (Ty.path "revm_handler::pre_execution::EthPreExecution")
                []
                [
                  Ty.apply
                    (Ty.path "revm_context::context::Context")
                    []
                    [
                      BLOCK;
                      TX;
                      CFG;
                      DB;
                      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ];
                      Ty.tuple []
                    ];
                  Ty.apply
                    (Ty.path "revm_context_interface::result::EVMError")
                    []
                    [ Ty.associated; Ty.path "revm_context_interface::result::InvalidTransaction" ]
                ];
              Ty.apply
                (Ty.path "revm_handler::execution::EthExecution")
                []
                [
                  Ty.apply
                    (Ty.path "revm_context::context::Context")
                    []
                    [
                      BLOCK;
                      TX;
                      CFG;
                      DB;
                      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ];
                      Ty.tuple []
                    ];
                  Ty.apply
                    (Ty.path "revm_context_interface::result::EVMError")
                    []
                    [ Ty.associated; Ty.path "revm_context_interface::result::InvalidTransaction" ];
                  Ty.apply
                    (Ty.path "revm_handler::frame::EthFrame")
                    []
                    [
                      Ty.apply
                        (Ty.path "revm_context::context::Context")
                        []
                        [
                          BLOCK;
                          TX;
                          CFG;
                          DB;
                          Ty.apply
                            (Ty.path "revm_context::journaled_state::JournaledState")
                            []
                            [ DB ];
                          Ty.tuple []
                        ];
                      Ty.apply
                        (Ty.path "revm_context_interface::result::EVMError")
                        []
                        [
                          Ty.associated;
                          Ty.path "revm_context_interface::result::InvalidTransaction"
                        ];
                      Ty.apply
                        (Ty.path "revm_interpreter::interpreter::EthInterpreter")
                        []
                        [
                          Ty.tuple [];
                          Ty.path "revm_interpreter::interpreter::shared_memory::SharedMemory"
                        ];
                      Ty.apply
                        (Ty.path "revm_handler::precompile_provider::EthPrecompileProvider")
                        []
                        [
                          Ty.apply
                            (Ty.path "revm_context::context::Context")
                            []
                            [
                              BLOCK;
                              TX;
                              CFG;
                              DB;
                              Ty.apply
                                (Ty.path "revm_context::journaled_state::JournaledState")
                                []
                                [ DB ];
                              Ty.tuple []
                            ];
                          Ty.apply
                            (Ty.path "revm_context_interface::result::EVMError")
                            []
                            [
                              Ty.associated;
                              Ty.path "revm_context_interface::result::InvalidTransaction"
                            ]
                        ];
                      Ty.apply
                        (Ty.path "revm_interpreter::interpreter::EthInstructionProvider")
                        []
                        [
                          Ty.apply
                            (Ty.path "revm_interpreter::interpreter::EthInterpreter")
                            []
                            [
                              Ty.tuple [];
                              Ty.path "revm_interpreter::interpreter::shared_memory::SharedMemory"
                            ];
                          Ty.apply
                            (Ty.path "revm_context::context::Context")
                            []
                            [
                              BLOCK;
                              TX;
                              CFG;
                              DB;
                              Ty.apply
                                (Ty.path "revm_context::journaled_state::JournaledState")
                                []
                                [ DB ];
                              Ty.tuple []
                            ]
                        ]
                    ]
                ];
              Ty.apply
                (Ty.path "revm_handler::post_execution::EthPostExecution")
                []
                [
                  Ty.apply
                    (Ty.path "revm_context::context::Context")
                    []
                    [
                      BLOCK;
                      TX;
                      CFG;
                      DB;
                      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ];
                      Ty.tuple []
                    ];
                  Ty.apply
                    (Ty.path "revm_context_interface::result::EVMError")
                    []
                    [ Ty.associated; Ty.path "revm_context_interface::result::InvalidTransaction" ];
                  Ty.path "revm_context_interface::result::HaltReason"
                ]
            ]
        ]).
  
  Module Impl_revm_evm_Evm_ERROR_CTX_revm_handler_EthHandler_CTX_ERROR_VAL_PREEXEC_EXEC_POSTEXEC.
    Definition Self (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "revm::evm::Evm")
        []
        [
          ERROR;
          CTX;
          Ty.apply
            (Ty.path "revm_handler::EthHandler")
            []
            [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
        ].
    
    (*
        pub fn preverify_transaction(&mut self) -> Result<(), ERROR> {
            let output = self.preverify_transaction_inner().map(|_| ());
            self.clear();
            output
        }
    *)
    Definition preverify_transaction
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ output :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "core::result::Result") [] [ Ty.path "u64"; ERROR ],
                    "map",
                    [],
                    [ Ty.tuple []; Ty.function [ Ty.tuple [ Ty.path "u64" ] ] (Ty.tuple []) ]
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm::evm::Evm")
                          []
                          [
                            ERROR;
                            CTX;
                            Ty.apply
                              (Ty.path "revm_handler::EthHandler")
                              []
                              [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                          ],
                        "preverify_transaction_inner",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                M.alloc (| α0 |),
                                [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "revm::evm::Evm")
                      []
                      [
                        ERROR;
                        CTX;
                        Ty.apply
                          (Ty.path "revm_handler::EthHandler")
                          []
                          [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                      ],
                    "clear",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            output
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_preverify_transaction :
      forall (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t),
      M.IsAssociatedFunction
        (Self ERROR CTX VAL PREEXEC EXEC POSTEXEC)
        "preverify_transaction"
        (preverify_transaction ERROR CTX VAL PREEXEC EXEC POSTEXEC).
    
    (*
        fn clear(&mut self) {
            self.handler.post_execution().clear(&mut self.context);
        }
    *)
    Definition clear
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "revm_handler_interface::post_execution::PostExecutionHandler",
                    POSTEXEC,
                    [],
                    [],
                    "clear",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "revm_handler_interface::handler::Handler",
                            Ty.apply
                              (Ty.path "revm_handler::EthHandler")
                              []
                              [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                            [],
                            [],
                            "post_execution",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "revm::evm::Evm",
                                "handler"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm::evm::Evm",
                            "context"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_clear :
      forall (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t),
      M.IsAssociatedFunction
        (Self ERROR CTX VAL PREEXEC EXEC POSTEXEC)
        "clear"
        (clear ERROR CTX VAL PREEXEC EXEC POSTEXEC).
    
    (*
        pub fn transact_preverified(
            &mut self,
        ) -> Result<<POSTEXEC as PostExecutionHandler>::Output, ERROR> {
            let initial_gas_spend = self
                .handler
                .validation()
                .validate_initial_tx_gas(&self.context)
                .inspect_err(|_| {
                    self.clear();
                })?;
            let output = self.transact_preverified_inner(initial_gas_spend);
            let output = self.handler.post_execution().end(&mut self.context, output);
            self.clear();
            output
        }
    *)
    Definition transact_preverified
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ initial_gas_spend :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply (Ty.path "core::result::Result") [] [ Ty.path "u64"; ERROR ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "u64"; ERROR ],
                                "inspect_err",
                                [],
                                [
                                  Ty.function
                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ ERROR ] ] ]
                                    (Ty.tuple [])
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_handler_interface::validation::ValidationHandler",
                                    VAL,
                                    [],
                                    [],
                                    "validate_initial_tx_gas",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "revm_handler_interface::handler::Handler",
                                            Ty.apply
                                              (Ty.path "revm_handler::EthHandler")
                                              []
                                              [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                                            [],
                                            [],
                                            "validation",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "revm::evm::Evm",
                                                "handler"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "revm::evm::Evm",
                                            "context"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (|
                                                    let~ _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "revm::evm::Evm")
                                                              []
                                                              [
                                                                ERROR;
                                                                CTX;
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "revm_handler::EthHandler")
                                                                  []
                                                                  [
                                                                    CTX;
                                                                    ERROR;
                                                                    VAL;
                                                                    PREEXEC;
                                                                    EXEC;
                                                                    POSTEXEC
                                                                  ]
                                                              ],
                                                            "clear",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (| M.read (| self |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.associated; ERROR ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; ERROR ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ output :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm::evm::Evm")
                          []
                          [
                            ERROR;
                            CTX;
                            Ty.apply
                              (Ty.path "revm_handler::EthHandler")
                              []
                              [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                          ],
                        "transact_preverified_inner",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                        M.read (| initial_gas_spend |)
                      ]
                    |)
                  |) in
                let~ output :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_handler_interface::post_execution::PostExecutionHandler",
                        POSTEXEC,
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_handler_interface::handler::Handler",
                                Ty.apply
                                  (Ty.path "revm_handler::EthHandler")
                                  []
                                  [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                                [],
                                [],
                                "post_execution",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "revm::evm::Evm",
                                    "handler"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "revm::evm::Evm",
                                "context"
                              |)
                            |)
                          |)
                        |);
                        M.read (| output |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm::evm::Evm")
                          []
                          [
                            ERROR;
                            CTX;
                            Ty.apply
                              (Ty.path "revm_handler::EthHandler")
                              []
                              [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                          ],
                        "clear",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |) in
                output
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_transact_preverified :
      forall (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t),
      M.IsAssociatedFunction
        (Self ERROR CTX VAL PREEXEC EXEC POSTEXEC)
        "transact_preverified"
        (transact_preverified ERROR CTX VAL PREEXEC EXEC POSTEXEC).
    
    (*
        fn preverify_transaction_inner(&mut self) -> Result<u64, ERROR> {
            self.handler.validation().validate_env(&self.context)?;
            let initial_gas_spend = self
                .handler
                .validation()
                .validate_initial_tx_gas(&self.context)?;
            self.handler
                .validation()
                .validate_tx_against_state(&mut self.context)?;
            Ok(initial_gas_spend)
        }
    *)
    Definition preverify_transaction_inner
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; ERROR ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "revm_handler_interface::validation::ValidationHandler",
                              VAL,
                              [],
                              [],
                              "validate_env",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_handler_interface::handler::Handler",
                                      Ty.apply
                                        (Ty.path "revm_handler::EthHandler")
                                        []
                                        [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                                      [],
                                      [],
                                      "validation",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm::evm::Evm",
                                          "handler"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "revm::evm::Evm",
                                      "context"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.path "u64"; ERROR ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; ERROR ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ initial_gas_spend :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply (Ty.path "core::result::Result") [] [ Ty.path "u64"; ERROR ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_handler_interface::validation::ValidationHandler",
                                VAL,
                                [],
                                [],
                                "validate_initial_tx_gas",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_handler_interface::handler::Handler",
                                        Ty.apply
                                          (Ty.path "revm_handler::EthHandler")
                                          []
                                          [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                                        [],
                                        [],
                                        "validation",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "revm::evm::Evm",
                                            "handler"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm::evm::Evm",
                                        "context"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "u64"; ERROR ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; ERROR ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; ERROR ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "revm_handler_interface::validation::ValidationHandler",
                              VAL,
                              [],
                              [],
                              "validate_tx_against_state",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_handler_interface::handler::Handler",
                                      Ty.apply
                                        (Ty.path "revm_handler::EthHandler")
                                        []
                                        [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                                      [],
                                      [],
                                      "validation",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm::evm::Evm",
                                          "handler"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "revm::evm::Evm",
                                      "context"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.path "u64"; ERROR ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; ERROR ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple "core::result::Result::Ok" [ M.read (| initial_gas_spend |) ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_preverify_transaction_inner :
      forall (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t),
      M.IsAssociatedFunction
        (Self ERROR CTX VAL PREEXEC EXEC POSTEXEC)
        "preverify_transaction_inner"
        (preverify_transaction_inner ERROR CTX VAL PREEXEC EXEC POSTEXEC).
    
    (*
        pub fn transact(&mut self) -> Result<<POSTEXEC as PostExecutionHandler>::Output, ERROR> {
            let initial_gas_spend = self.preverify_transaction_inner().inspect_err(|_| {
                self.clear();
            })?;
    
            let output = self.transact_preverified_inner(initial_gas_spend);
            let output = self.handler.post_execution().end(&mut self.context, output);
            self.clear();
            output
        }
    *)
    Definition transact
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ initial_gas_spend :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply (Ty.path "core::result::Result") [] [ Ty.path "u64"; ERROR ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "u64"; ERROR ],
                                "inspect_err",
                                [],
                                [
                                  Ty.function
                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ ERROR ] ] ]
                                    (Ty.tuple [])
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "revm::evm::Evm")
                                      []
                                      [
                                        ERROR;
                                        CTX;
                                        Ty.apply
                                          (Ty.path "revm_handler::EthHandler")
                                          []
                                          [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                                      ],
                                    "preverify_transaction_inner",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| self |) |)
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (|
                                                    let~ _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "revm::evm::Evm")
                                                              []
                                                              [
                                                                ERROR;
                                                                CTX;
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "revm_handler::EthHandler")
                                                                  []
                                                                  [
                                                                    CTX;
                                                                    ERROR;
                                                                    VAL;
                                                                    PREEXEC;
                                                                    EXEC;
                                                                    POSTEXEC
                                                                  ]
                                                              ],
                                                            "clear",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (| M.read (| self |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.associated; ERROR ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; ERROR ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ output :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm::evm::Evm")
                          []
                          [
                            ERROR;
                            CTX;
                            Ty.apply
                              (Ty.path "revm_handler::EthHandler")
                              []
                              [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                          ],
                        "transact_preverified_inner",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                        M.read (| initial_gas_spend |)
                      ]
                    |)
                  |) in
                let~ output :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_handler_interface::post_execution::PostExecutionHandler",
                        POSTEXEC,
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_handler_interface::handler::Handler",
                                Ty.apply
                                  (Ty.path "revm_handler::EthHandler")
                                  []
                                  [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                                [],
                                [],
                                "post_execution",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "revm::evm::Evm",
                                    "handler"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "revm::evm::Evm",
                                "context"
                              |)
                            |)
                          |)
                        |);
                        M.read (| output |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm::evm::Evm")
                          []
                          [
                            ERROR;
                            CTX;
                            Ty.apply
                              (Ty.path "revm_handler::EthHandler")
                              []
                              [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ]
                          ],
                        "clear",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |) in
                output
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_transact :
      forall (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t),
      M.IsAssociatedFunction
        (Self ERROR CTX VAL PREEXEC EXEC POSTEXEC)
        "transact"
        (transact ERROR CTX VAL PREEXEC EXEC POSTEXEC).
    
    (*
        fn transact_preverified_inner(
            &mut self,
            initial_gas_spend: u64,
        ) -> Result<<POSTEXEC as PostExecutionHandler>::Output, ERROR> {
            let context = &mut self.context;
            let pre_exec = self.handler.pre_execution();
    
            // Load access list and beneficiary if needed.
            pre_exec.load_accounts(context)?;
    
            // Deduce caller balance with its limit.
            pre_exec.deduct_caller(context)?;
    
            let gas_limit = context.tx().common_fields().gas_limit() - initial_gas_spend;
    
            // Apply EIP-7702 auth list.
            let eip7702_gas_refund = pre_exec.apply_eip7702_auth_list(context)? as i64;
    
            // Start execution
    
            //let instructions = self.handler.take_instruction_table();
            let exec = self.handler.execution();
    
            // Create first frame action
            let first_frame = exec.init_first_frame(context, gas_limit)?;
            let frame_result = match first_frame {
                FrameOrResultGen::Frame(frame) => exec.run(context, frame)?,
                FrameOrResultGen::Result(result) => result,
            };
    
            let mut exec_result = exec.last_frame_result(context, frame_result)?;
    
            let post_exec = self.handler.post_execution();
            // Calculate final refund and add EIP-7702 refund to gas.
            post_exec.refund(context, &mut exec_result, eip7702_gas_refund);
            // Reimburse the caller
            post_exec.reimburse_caller(context, &mut exec_result)?;
            // Reward beneficiary
            post_exec.reward_beneficiary(context, &mut exec_result)?;
            // Returns output of transaction.
            post_exec.output(context, exec_result)
        }
    *)
    Definition transact_preverified_inner
        (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self ERROR CTX VAL PREEXEC EXEC POSTEXEC in
      match ε, τ, α with
      | [], [], [ self; initial_gas_spend ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let initial_gas_spend := M.alloc (| initial_gas_spend |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ context :=
                  M.alloc (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm::evm::Evm",
                        "context"
                      |)
                    |)
                  |) in
                let~ pre_exec :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_handler_interface::handler::Handler",
                        Ty.apply
                          (Ty.path "revm_handler::EthHandler")
                          []
                          [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                        [],
                        [],
                        "pre_execution",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm::evm::Evm",
                            "handler"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; ERROR ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "revm_handler_interface::pre_execution::PreExecutionHandler",
                              PREEXEC,
                              [],
                              [],
                              "load_accounts",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pre_exec |) |) |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| context |) |) |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.associated; ERROR ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; ERROR ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; ERROR ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "revm_handler_interface::pre_execution::PreExecutionHandler",
                              PREEXEC,
                              [],
                              [],
                              "deduct_caller",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pre_exec |) |) |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| context |) |) |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.associated; ERROR ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; ERROR ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ gas_limit :=
                  M.alloc (|
                    BinOp.Wrap.sub (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "revm_context_interface::transaction::common::CommonTxFields",
                          Ty.dyn
                            [
                              ("revm_context_interface::transaction::common::CommonTxFields::Trait",
                                [])
                            ],
                          [],
                          [],
                          "gas_limit",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "revm_context_interface::transaction::Transaction",
                                  Ty.associated,
                                  [],
                                  [],
                                  "common_fields",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_context_interface::transaction::TransactionGetter",
                                          Ty.apply (Ty.path "&mut") [] [ CTX ],
                                          [],
                                          [],
                                          "tx",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, context |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |),
                      M.read (| initial_gas_spend |)
                    |)
                  |) in
                let~ eip7702_gas_refund :=
                  M.alloc (|
                    M.cast
                      (Ty.path "i64")
                      (M.read (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "u64"; ERROR ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_handler_interface::pre_execution::PreExecutionHandler",
                                    PREEXEC,
                                    [],
                                    [],
                                    "apply_eip7702_auth_list",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| pre_exec |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| context |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [ Ty.associated; ERROR ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [ Ty.path "core::convert::Infallible"; ERROR ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |))
                  |) in
                let~ exec :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_handler_interface::handler::Handler",
                        Ty.apply
                          (Ty.path "revm_handler::EthHandler")
                          []
                          [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                        [],
                        [],
                        "execution",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm::evm::Evm",
                            "handler"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ first_frame :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "revm_handler_interface::util::FrameOrResultGen")
                                  []
                                  [ Ty.associated; Ty.path "revm_handler::frame_data::FrameResult"
                                  ];
                                ERROR
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_handler_interface::execution::ExecutionHandler",
                                EXEC,
                                [],
                                [],
                                "init_first_frame",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| exec |) |) |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| context |) |)
                                |);
                                M.read (| gas_limit |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.associated; ERROR ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; ERROR ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ frame_result :=
                  M.copy (|
                    M.match_operator (|
                      first_frame,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "revm_handler_interface::util::FrameOrResultGen::Frame",
                                0
                              |) in
                            let frame := M.copy (| γ0_0 |) in
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.path "revm_handler::frame_data::FrameResult"; ERROR ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_handler_interface::execution::ExecutionHandler",
                                        EXEC,
                                        [],
                                        [],
                                        "run",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| exec |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| context |) |)
                                        |);
                                        M.read (| frame |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [ Ty.associated; ERROR ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [ Ty.path "core::convert::Infallible"; ERROR ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "revm_handler_interface::util::FrameOrResultGen::Result",
                                0
                              |) in
                            let result := M.copy (| γ0_0 |) in
                            result))
                      ]
                    |)
                  |) in
                let~ exec_result :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "revm_handler::frame_data::FrameResult"; ERROR ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_handler_interface::execution::ExecutionHandler",
                                EXEC,
                                [],
                                [],
                                "last_frame_result",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| exec |) |) |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| context |) |)
                                |);
                                M.read (| frame_result |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.associated; ERROR ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; ERROR ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ post_exec :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_handler_interface::handler::Handler",
                        Ty.apply
                          (Ty.path "revm_handler::EthHandler")
                          []
                          [ CTX; ERROR; VAL; PREEXEC; EXEC; POSTEXEC ],
                        [],
                        [],
                        "post_execution",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm::evm::Evm",
                            "handler"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_handler_interface::post_execution::PostExecutionHandler",
                        POSTEXEC,
                        [],
                        [],
                        "refund",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| post_exec |) |) |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| context |) |) |);
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (| M.borrow (| Pointer.Kind.MutRef, exec_result |) |)
                        |);
                        M.read (| eip7702_gas_refund |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; ERROR ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "revm_handler_interface::post_execution::PostExecutionHandler",
                              POSTEXEC,
                              [],
                              [],
                              "reimburse_caller",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| post_exec |) |) |);
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.read (| context |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.borrow (| Pointer.Kind.MutRef, exec_result |) |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.associated; ERROR ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; ERROR ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; ERROR ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "revm_handler_interface::post_execution::PostExecutionHandler",
                              POSTEXEC,
                              [],
                              [],
                              "reward_beneficiary",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| post_exec |) |) |);
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.read (| context |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.borrow (| Pointer.Kind.MutRef, exec_result |) |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.associated; ERROR ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; ERROR ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "revm_handler_interface::post_execution::PostExecutionHandler",
                      POSTEXEC,
                      [],
                      [],
                      "output",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| post_exec |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| context |) |) |);
                      M.read (| exec_result |)
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_transact_preverified_inner :
      forall (ERROR CTX VAL PREEXEC EXEC POSTEXEC : Ty.t),
      M.IsAssociatedFunction
        (Self ERROR CTX VAL PREEXEC EXEC POSTEXEC)
        "transact_preverified_inner"
        (transact_preverified_inner ERROR CTX VAL PREEXEC EXEC POSTEXEC).
  End Impl_revm_evm_Evm_ERROR_CTX_revm_handler_EthHandler_CTX_ERROR_VAL_PREEXEC_EXEC_POSTEXEC.
End evm.
