(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instructions.
  Module host.
    (*
    pub fn balance<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        popn_top!([], top, interpreter);
        let address = top.into_address();
        let Some(balance) = host.balance(address) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        let spec_id = interpreter.runtime_flag.spec_id();
        gas!(
            interpreter,
            if spec_id.is_enabled_in(BERLIN) {
                warm_cold_cost(balance.is_cold)
            } else if spec_id.is_enabled_in(ISTANBUL) {
                // EIP-1884: Repricing for trie-size-dependent opcodes
                700
            } else if spec_id.is_enabled_in(TANGERINE) {
                400
            } else {
                20
            }
        );
        *top = balance.data;
    }
    *)
    Definition balance (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn_top",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let top := M.copy (| γ1_1 |) in
                        let~ address :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_interpreter::instructions::utility::IntoAddress",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "into_address",
                                []
                              |),
                              [ M.read (| M.read (| top |) |) ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "balance",
                                []
                              |),
                              [ M.read (| host |); M.read (| address |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let balance := M.copy (| γ0_0 |) in
                                let~ spec_id :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::RuntimeFlag",
                                        Ty.associated,
                                        [],
                                        "spec_id",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "revm_interpreter::gas::Gas",
                                                      "record_cost",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                          Ty.associated,
                                                          [],
                                                          "gas",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| interpreter |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (|
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "revm_specification::hardfork::SpecId",
                                                                          "is_enabled_in",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| spec_id |);
                                                                          Value.StructTuple
                                                                            "revm_specification::hardfork::SpecId::BERLIN"
                                                                            []
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "revm_interpreter::gas::calc::warm_cold_cost",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          balance,
                                                                          "revm_context_interface::journaled_state::StateLoad",
                                                                          "is_cold"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  M.alloc (| Value.Tuple [] |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ :=
                                                                          M.use
                                                                            (M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "revm_specification::hardfork::SpecId",
                                                                                  "is_enabled_in",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    spec_id
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "revm_specification::hardfork::SpecId::ISTANBUL"
                                                                                    []
                                                                                ]
                                                                              |)
                                                                            |)) in
                                                                        let _ :=
                                                                          M.is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.Bool true
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Integer
                                                                            IntegerKind.U64
                                                                            700
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "revm_specification::hardfork::SpecId",
                                                                                          "is_enabled_in",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            spec_id
                                                                                          |);
                                                                                          Value.StructTuple
                                                                                            "revm_specification::hardfork::SpecId::TANGERINE"
                                                                                            []
                                                                                        ]
                                                                                      |)
                                                                                    |)) in
                                                                                let _ :=
                                                                                  M.is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Integer
                                                                                    IntegerKind.U64
                                                                                    400
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  Value.Integer
                                                                                    IntegerKind.U64
                                                                                    20
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated,
                                                        [],
                                                        "set_instruction_result",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| interpreter |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ :=
                                  M.write (|
                                    M.read (| top |),
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        balance,
                                        "revm_context_interface::journaled_state::StateLoad",
                                        "data"
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_balance : M.IsFunction "revm_interpreter::instructions::host::balance" balance.
    
    (*
    pub fn selfbalance<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, ISTANBUL);
        gas!(interpreter, gas::LOW);
        let Some(balance) = host.balance(interpreter.input.target_address()) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        push!(interpreter, balance.data);
    }
    *)
    Definition selfbalance (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated,
                                          [],
                                          "spec_id",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "runtime_flag"
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::ISTANBUL"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (| "revm_interpreter::gas::constants::LOW" |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_context_interface::host::Host",
                        H,
                        [],
                        "balance",
                        []
                      |),
                      [
                        M.read (| host |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "revm_interpreter::interpreter_types::InputsTrait",
                            Ty.associated,
                            [],
                            "target_address",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| interpreter |),
                              "revm_interpreter::interpreter::Interpreter",
                              "input"
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let balance := M.copy (| γ0_0 |) in
                        let~ _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::StackTrait",
                                              Ty.associated,
                                              [],
                                              "push",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| interpreter |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "stack"
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  balance,
                                                  "revm_context_interface::journaled_state::StateLoad",
                                                  "data"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated,
                                                [],
                                                "set_instruction_result",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_selfbalance :
      M.IsFunction "revm_interpreter::instructions::host::selfbalance" selfbalance.
    
    (*
    pub fn extcodesize<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        popn_top!([], top, interpreter);
        let address = top.into_address();
        let Some(code) = host.code(address) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        let (code, load) = code.into_components();
        let spec_id = interpreter.runtime_flag.spec_id();
        if spec_id.is_enabled_in(BERLIN) {
            gas!(interpreter, warm_cold_cost_with_delegation(load));
        } else if spec_id.is_enabled_in(TANGERINE) {
            gas!(interpreter, 700);
        } else {
            gas!(interpreter, 20);
        }
    
        *top = U256::from(code.len());
    }
    *)
    Definition extcodesize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn_top",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let top := M.copy (| γ1_1 |) in
                        let~ address :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_interpreter::instructions::utility::IntoAddress",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "into_address",
                                []
                              |),
                              [ M.read (| M.read (| top |) |) ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "code",
                                []
                              |),
                              [ M.read (| host |); M.read (| address |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let code := M.copy (| γ0_0 |) in
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "revm_context_interface::journaled_state::Eip7702CodeLoad")
                                          []
                                          [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                        "into_components",
                                        []
                                      |),
                                      [ M.read (| code |) ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let code := M.copy (| γ0_0 |) in
                                        let load := M.copy (| γ0_1 |) in
                                        let~ spec_id :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::RuntimeFlag",
                                                Ty.associated,
                                                [],
                                                "spec_id",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "runtime_flag"
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ :=
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "revm_specification::hardfork::SpecId",
                                                            "is_enabled_in",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| spec_id |);
                                                            Value.StructTuple
                                                              "revm_specification::hardfork::SpecId::BERLIN"
                                                              []
                                                          ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let~ _ :=
                                                    M.match_operator (|
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "revm_interpreter::gas::Gas",
                                                                        "record_cost",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                                            Ty.associated,
                                                                            [],
                                                                            "gas",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.read (|
                                                                                interpreter
                                                                              |),
                                                                              "revm_interpreter::interpreter::Interpreter",
                                                                              "control"
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_function (|
                                                                            "revm_interpreter::gas::calc::warm_cold_cost_with_delegation",
                                                                            []
                                                                          |),
                                                                          [ M.read (| load |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ _ :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                                          Ty.associated,
                                                                          [],
                                                                          "set_instruction_result",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (|
                                                                              interpreter
                                                                            |),
                                                                            "revm_interpreter::interpreter::Interpreter",
                                                                            "control"
                                                                          |);
                                                                          Value.StructTuple
                                                                            "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                            []
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  M.return_ (| Value.Tuple [] |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "revm_specification::hardfork::SpecId",
                                                                    "is_enabled_in",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| spec_id |);
                                                                    Value.StructTuple
                                                                      "revm_specification::hardfork::SpecId::TANGERINE"
                                                                      []
                                                                  ]
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          let~ _ :=
                                                            M.match_operator (|
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          UnOp.not (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "revm_interpreter::gas::Gas",
                                                                                "record_cost",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                                    Ty.associated,
                                                                                    [],
                                                                                    "gas",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        interpreter
                                                                                      |),
                                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                                      "control"
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.Integer
                                                                                  IntegerKind.U64
                                                                                  700
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      M.is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          let~ _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                                                  Ty.associated,
                                                                                  [],
                                                                                  "set_instruction_result",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |),
                                                                                    "revm_interpreter::interpreter::Interpreter",
                                                                                    "control"
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                                    []
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.return_ (|
                                                                            Value.Tuple []
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let~ _ :=
                                                            M.match_operator (|
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          UnOp.not (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "revm_interpreter::gas::Gas",
                                                                                "record_cost",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                                    Ty.associated,
                                                                                    [],
                                                                                    "gas",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        interpreter
                                                                                      |),
                                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                                      "control"
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.Integer
                                                                                  IntegerKind.U64
                                                                                  20
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      M.is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          let~ _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                                                  Ty.associated,
                                                                                  [],
                                                                                  "set_instruction_result",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |),
                                                                                    "revm_interpreter::interpreter::Interpreter",
                                                                                    "control"
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                                    []
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.return_ (|
                                                                            Value.Tuple []
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        let~ _ :=
                                          M.write (|
                                            M.read (| top |),
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "ruint::Uint")
                                                  [
                                                    Value.Integer IntegerKind.Usize 256;
                                                    Value.Integer IntegerKind.Usize 4
                                                  ]
                                                  [],
                                                "from",
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "bytes::bytes::Bytes",
                                                    "len",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.path "alloy_primitives::bytes_::Bytes",
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ code ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_extcodesize :
      M.IsFunction "revm_interpreter::instructions::host::extcodesize" extcodesize.
    
    (*
    pub fn extcodehash<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, CONSTANTINOPLE);
        popn_top!([], top, interpreter);
        let address = top.into_address();
        let Some(code_hash) = host.code_hash(address) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        let (code_hash, load) = code_hash.into_components();
        let spec_id = interpreter.runtime_flag.spec_id();
        if spec_id.is_enabled_in(BERLIN) {
            gas!(interpreter, warm_cold_cost_with_delegation(load))
        } else if spec_id.is_enabled_in(ISTANBUL) {
            gas!(interpreter, 700);
        } else {
            gas!(interpreter, 400);
        }
        *top = code_hash.into();
    }
    *)
    Definition extcodehash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated,
                                          [],
                                          "spec_id",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "runtime_flag"
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::CONSTANTINOPLE"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn_top",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let top := M.copy (| γ1_1 |) in
                        let~ address :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_interpreter::instructions::utility::IntoAddress",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "into_address",
                                []
                              |),
                              [ M.read (| M.read (| top |) |) ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "code_hash",
                                []
                              |),
                              [ M.read (| host |); M.read (| address |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let code_hash := M.copy (| γ0_0 |) in
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "revm_context_interface::journaled_state::Eip7702CodeLoad")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              []
                                          ],
                                        "into_components",
                                        []
                                      |),
                                      [ M.read (| code_hash |) ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let code_hash := M.copy (| γ0_0 |) in
                                        let load := M.copy (| γ0_1 |) in
                                        let~ spec_id :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::RuntimeFlag",
                                                Ty.associated,
                                                [],
                                                "spec_id",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "runtime_flag"
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ :=
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "revm_specification::hardfork::SpecId",
                                                            "is_enabled_in",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| spec_id |);
                                                            Value.StructTuple
                                                              "revm_specification::hardfork::SpecId::BERLIN"
                                                              []
                                                          ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "revm_interpreter::gas::Gas",
                                                                      "record_cost",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                                          Ty.associated,
                                                                          [],
                                                                          "gas",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (|
                                                                              interpreter
                                                                            |),
                                                                            "revm_interpreter::interpreter::Interpreter",
                                                                            "control"
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_function (|
                                                                          "revm_interpreter::gas::calc::warm_cold_cost_with_delegation",
                                                                          []
                                                                        |),
                                                                        [ M.read (| load |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                                        Ty.associated,
                                                                        [],
                                                                        "set_instruction_result",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| interpreter |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "control"
                                                                        |);
                                                                        Value.StructTuple
                                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.return_ (| Value.Tuple [] |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "revm_specification::hardfork::SpecId",
                                                                    "is_enabled_in",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| spec_id |);
                                                                    Value.StructTuple
                                                                      "revm_specification::hardfork::SpecId::ISTANBUL"
                                                                      []
                                                                  ]
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          let~ _ :=
                                                            M.match_operator (|
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          UnOp.not (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "revm_interpreter::gas::Gas",
                                                                                "record_cost",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                                    Ty.associated,
                                                                                    [],
                                                                                    "gas",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        interpreter
                                                                                      |),
                                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                                      "control"
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.Integer
                                                                                  IntegerKind.U64
                                                                                  700
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      M.is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          let~ _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                                                  Ty.associated,
                                                                                  [],
                                                                                  "set_instruction_result",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |),
                                                                                    "revm_interpreter::interpreter::Interpreter",
                                                                                    "control"
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                                    []
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.return_ (|
                                                                            Value.Tuple []
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let~ _ :=
                                                            M.match_operator (|
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          UnOp.not (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "revm_interpreter::gas::Gas",
                                                                                "record_cost",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                                    Ty.associated,
                                                                                    [],
                                                                                    "gas",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        interpreter
                                                                                      |),
                                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                                      "control"
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.Integer
                                                                                  IntegerKind.U64
                                                                                  400
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      M.is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          let~ _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                                                  Ty.associated,
                                                                                  [],
                                                                                  "set_instruction_result",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |),
                                                                                    "revm_interpreter::interpreter::Interpreter",
                                                                                    "control"
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                                    []
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.return_ (|
                                                                            Value.Tuple []
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        let~ _ :=
                                          M.write (|
                                            M.read (| top |),
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.apply
                                                  (Ty.path
                                                    "alloy_primitives::bits::fixed::FixedBytes")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    []
                                                ],
                                                "into",
                                                []
                                              |),
                                              [ M.read (| code_hash |) ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_extcodehash :
      M.IsFunction "revm_interpreter::instructions::host::extcodehash" extcodehash.
    
    (*
    pub fn extcodecopy<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        popn!([address, memory_offset, code_offset, len_u256], interpreter);
        let address = address.into_address();
        let Some(code) = host.code(address) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
    
        let len = as_usize_or_fail!(interpreter, len_u256);
        let (code, load) = code.into_components();
        gas_or_fail!(
            interpreter,
            gas::extcodecopy_cost(interpreter.runtime_flag.spec_id(), len, load)
        );
        if len == 0 {
            return;
        }
        let memory_offset = as_usize_or_fail!(interpreter, memory_offset);
        let code_offset = min(as_usize_saturated!(code_offset), code.len());
        resize_memory!(interpreter, memory_offset, len);
    
        // Note: This can't panic because we resized memory to fit.
        interpreter
            .memory
            .set_data(memory_offset, code_offset, len, &code);
    }
    *)
    Definition extcodecopy (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let γ1_2 := M.SubPointer.get_slice_index (| γ0_0, 2 |) in
                        let γ1_3 := M.SubPointer.get_slice_index (| γ0_0, 3 |) in
                        let address := M.copy (| γ1_0 |) in
                        let memory_offset := M.copy (| γ1_1 |) in
                        let code_offset := M.copy (| γ1_2 |) in
                        let len_u256 := M.copy (| γ1_3 |) in
                        let~ address :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_interpreter::instructions::utility::IntoAddress",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "into_address",
                                []
                              |),
                              [ M.read (| address |) ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "code",
                                []
                              |),
                              [ M.read (| host |); M.read (| address |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let code := M.copy (| γ0_0 |) in
                                let~ len :=
                                  M.copy (|
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "as_limbs",
                                            []
                                          |),
                                          [ len_u256 ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let x := M.copy (| γ |) in
                                            let~ _ :=
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            BinOp.bit_or
                                                              (BinOp.bit_or
                                                                (BinOp.bit_or
                                                                  (BinOp.gt (|
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.read (| x |),
                                                                        M.alloc (|
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            0
                                                                        |)
                                                                      |)
                                                                    |),
                                                                    M.rust_cast
                                                                      (M.read (|
                                                                        M.get_constant (|
                                                                          "core::num::MAX"
                                                                        |)
                                                                      |))
                                                                  |))
                                                                  (BinOp.ne (|
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.read (| x |),
                                                                        M.alloc (|
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        |)
                                                                      |)
                                                                    |),
                                                                    Value.Integer IntegerKind.U64 0
                                                                  |)))
                                                                (BinOp.ne (|
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.read (| x |),
                                                                      M.alloc (|
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      |)
                                                                    |)
                                                                  |),
                                                                  Value.Integer IntegerKind.U64 0
                                                                |)))
                                                              (BinOp.ne (|
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.read (| x |),
                                                                    M.alloc (|
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        3
                                                                    |)
                                                                  |)
                                                                |),
                                                                Value.Integer IntegerKind.U64 0
                                                              |))
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ _ :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                    Ty.associated,
                                                                    [],
                                                                    "set_instruction_result",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| interpreter |),
                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                      "control"
                                                                    |);
                                                                    Value.StructTuple
                                                                      "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                                      []
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.return_ (| Value.Tuple [] |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (|
                                              M.rust_cast
                                                (M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.read (| x |),
                                                    M.alloc (| Value.Integer IntegerKind.Usize 0 |)
                                                  |)
                                                |))
                                            |)))
                                      ]
                                    |)
                                  |) in
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "revm_context_interface::journaled_state::Eip7702CodeLoad")
                                          []
                                          [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                        "into_components",
                                        []
                                      |),
                                      [ M.read (| code |) ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let code := M.copy (| γ0_0 |) in
                                        let load := M.copy (| γ0_1 |) in
                                        let~ _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_function (|
                                                  "revm_interpreter::gas::calc::extcodecopy_cost",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                                      Ty.associated,
                                                      [],
                                                      "spec_id",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| interpreter |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "runtime_flag"
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| len |);
                                                  M.read (| load |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let gas_used := M.copy (| γ0_0 |) in
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "revm_interpreter::gas::Gas",
                                                                      "record_cost",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                                          Ty.associated,
                                                                          [],
                                                                          "gas",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (|
                                                                              interpreter
                                                                            |),
                                                                            "revm_interpreter::interpreter::Interpreter",
                                                                            "control"
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.read (| gas_used |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                                        Ty.associated,
                                                                        [],
                                                                        "set_instruction_result",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| interpreter |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "control"
                                                                        |);
                                                                        Value.StructTuple
                                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.return_ (| Value.Tuple [] |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "revm_interpreter::interpreter_types::LoopControl",
                                                                Ty.associated,
                                                                [],
                                                                "set_instruction_result",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| interpreter |),
                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                  "control"
                                                                |);
                                                                Value.StructTuple
                                                                  "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                  []
                                                              ]
                                                            |)
                                                          |) in
                                                        M.return_ (| Value.Tuple [] |)
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |) in
                                        let~ _ :=
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        BinOp.eq (|
                                                          M.read (| len |),
                                                          Value.Integer IntegerKind.Usize 0
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (| M.return_ (| Value.Tuple [] |) |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let~ memory_offset :=
                                          M.copy (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      [],
                                                    "as_limbs",
                                                    []
                                                  |),
                                                  [ memory_offset ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let x := M.copy (| γ |) in
                                                    let~ _ :=
                                                      M.match_operator (|
                                                        M.alloc (| Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    BinOp.bit_or
                                                                      (BinOp.bit_or
                                                                        (BinOp.bit_or
                                                                          (BinOp.gt (|
                                                                            M.read (|
                                                                              M.SubPointer.get_array_field (|
                                                                                M.read (| x |),
                                                                                M.alloc (|
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    0
                                                                                |)
                                                                              |)
                                                                            |),
                                                                            M.rust_cast
                                                                              (M.read (|
                                                                                M.get_constant (|
                                                                                  "core::num::MAX"
                                                                                |)
                                                                              |))
                                                                          |))
                                                                          (BinOp.ne (|
                                                                            M.read (|
                                                                              M.SubPointer.get_array_field (|
                                                                                M.read (| x |),
                                                                                M.alloc (|
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                |)
                                                                              |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.U64
                                                                              0
                                                                          |)))
                                                                        (BinOp.ne (|
                                                                          M.read (|
                                                                            M.SubPointer.get_array_field (|
                                                                              M.read (| x |),
                                                                              M.alloc (|
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              |)
                                                                            |)
                                                                          |),
                                                                          Value.Integer
                                                                            IntegerKind.U64
                                                                            0
                                                                        |)))
                                                                      (BinOp.ne (|
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.read (| x |),
                                                                            M.alloc (|
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                3
                                                                            |)
                                                                          |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      |))
                                                                  |)) in
                                                              let _ :=
                                                                M.is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    let~ _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                                            Ty.associated,
                                                                            [],
                                                                            "set_instruction_result",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.read (|
                                                                                interpreter
                                                                              |),
                                                                              "revm_interpreter::interpreter::Interpreter",
                                                                              "control"
                                                                            |);
                                                                            Value.StructTuple
                                                                              "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                                              []
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.return_ (| Value.Tuple [] |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |) in
                                                    M.alloc (|
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.SubPointer.get_array_field (|
                                                            M.read (| x |),
                                                            M.alloc (|
                                                              Value.Integer IntegerKind.Usize 0
                                                            |)
                                                          |)
                                                        |))
                                                    |)))
                                              ]
                                            |)
                                          |) in
                                        let~ code_offset :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (|
                                                "core::cmp::min",
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "core::num::error::TryFromIntError"
                                                      ],
                                                    "unwrap_or",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::TryFrom",
                                                        Ty.path "usize",
                                                        [ Ty.path "u64" ],
                                                        "try_from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "ruint::Uint")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        256;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                    [],
                                                                  "as_limbs",
                                                                  []
                                                                |),
                                                                [ code_offset ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let x := M.copy (| γ |) in
                                                                  M.match_operator (|
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                BinOp.bit_and
                                                                                  (BinOp.bit_and
                                                                                    (BinOp.eq (|
                                                                                      M.read (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.read (|
                                                                                            x
                                                                                          |),
                                                                                          M.alloc (|
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          |)
                                                                                        |)
                                                                                      |),
                                                                                      Value.Integer
                                                                                        IntegerKind.U64
                                                                                        0
                                                                                    |))
                                                                                    (BinOp.eq (|
                                                                                      M.read (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.read (|
                                                                                            x
                                                                                          |),
                                                                                          M.alloc (|
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              2
                                                                                          |)
                                                                                        |)
                                                                                      |),
                                                                                      Value.Integer
                                                                                        IntegerKind.U64
                                                                                        0
                                                                                    |)))
                                                                                  (BinOp.eq (|
                                                                                    M.read (|
                                                                                      M.SubPointer.get_array_field (|
                                                                                        M.read (|
                                                                                          x
                                                                                        |),
                                                                                        M.alloc (|
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            3
                                                                                        |)
                                                                                      |)
                                                                                    |),
                                                                                    Value.Integer
                                                                                      IntegerKind.U64
                                                                                      0
                                                                                  |))
                                                                              |)) in
                                                                          let _ :=
                                                                            M.is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          M.SubPointer.get_array_field (|
                                                                            M.read (| x |),
                                                                            M.alloc (|
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.get_constant (|
                                                                            "core::num::MAX"
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (|
                                                      M.get_constant (| "core::num::MAX" |)
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "bytes::bytes::Bytes",
                                                    "len",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.path "alloy_primitives::bytes_::Bytes",
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ code ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ words_num :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (|
                                                "revm_interpreter::interpreter::shared_memory::num_words",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "usize",
                                                    "saturating_add",
                                                    []
                                                  |),
                                                  [ M.read (| memory_offset |); M.read (| len |) ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "revm_interpreter::gas::Gas",
                                                  "record_memory_expansion",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                      Ty.associated,
                                                      [],
                                                      "gas",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| interpreter |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "control"
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| words_num |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "revm_interpreter::gas::MemoryExtensionResult::Extended"
                                                    |) in
                                                  let~ _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::MemoryTrait",
                                                          Ty.associated,
                                                          [],
                                                          "resize",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| interpreter |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "memory"
                                                          |);
                                                          BinOp.Wrap.mul (|
                                                            M.read (| words_num |),
                                                            Value.Integer IntegerKind.Usize 32
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "revm_interpreter::gas::MemoryExtensionResult::OutOfGas"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "revm_interpreter::interpreter_types::LoopControl",
                                                                Ty.associated,
                                                                [],
                                                                "set_instruction_result",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| interpreter |),
                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                  "control"
                                                                |);
                                                                Value.StructTuple
                                                                  "revm_interpreter::instruction_result::InstructionResult::MemoryOOG"
                                                                  []
                                                              ]
                                                            |)
                                                          |) in
                                                        M.return_ (| Value.Tuple [] |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "revm_interpreter::gas::MemoryExtensionResult::Same"
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let~ _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::MemoryTrait",
                                                Ty.associated,
                                                [],
                                                "set_data",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "memory"
                                                |);
                                                M.read (| memory_offset |);
                                                M.read (| code_offset |);
                                                M.read (| len |);
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.path "bytes::bytes::Bytes",
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.path "alloy_primitives::bytes_::Bytes",
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ code ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_extcodecopy :
      M.IsFunction "revm_interpreter::instructions::host::extcodecopy" extcodecopy.
    
    (*
    pub fn blockhash<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        gas!(interpreter, gas::BLOCKHASH);
        popn_top!([], number, interpreter);
    
        let number_u64 = as_u64_saturated!(number);
        let Some(hash) = host.block_hash(number_u64) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        *number = U256::from_be_bytes(hash.0);
    }
    *)
    Definition blockhash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BLOCKHASH"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn_top",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let number := M.copy (| γ1_1 |) in
                        let~ number_u64 :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "as_limbs",
                                    []
                                  |),
                                  [ M.read (| number |) ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  BinOp.bit_and
                                                    (BinOp.bit_and
                                                      (BinOp.eq (|
                                                        M.read (|
                                                          M.SubPointer.get_array_field (|
                                                            M.read (| x |),
                                                            M.alloc (|
                                                              Value.Integer IntegerKind.Usize 1
                                                            |)
                                                          |)
                                                        |),
                                                        Value.Integer IntegerKind.U64 0
                                                      |))
                                                      (BinOp.eq (|
                                                        M.read (|
                                                          M.SubPointer.get_array_field (|
                                                            M.read (| x |),
                                                            M.alloc (|
                                                              Value.Integer IntegerKind.Usize 2
                                                            |)
                                                          |)
                                                        |),
                                                        Value.Integer IntegerKind.U64 0
                                                      |)))
                                                    (BinOp.eq (|
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.read (| x |),
                                                          M.alloc (|
                                                            Value.Integer IntegerKind.Usize 3
                                                          |)
                                                        |)
                                                      |),
                                                      Value.Integer IntegerKind.U64 0
                                                    |))
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.SubPointer.get_array_field (|
                                              M.read (| x |),
                                              M.alloc (| Value.Integer IntegerKind.Usize 0 |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic (M.get_constant (| "core::num::MAX" |)))
                                      ]
                                    |)))
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "block_hash",
                                []
                              |),
                              [ M.read (| host |); M.read (| number_u64 |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let hash := M.copy (| γ0_0 |) in
                                let~ _ :=
                                  M.write (|
                                    M.read (| number |),
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        "from_be_bytes",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            hash,
                                            "alloy_primitives::bits::fixed::FixedBytes",
                                            0
                                          |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_blockhash :
      M.IsFunction "revm_interpreter::instructions::host::blockhash" blockhash.
    
    (*
    pub fn sload<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        popn_top!([], index, interpreter);
        let Some(value) = host.sload(interpreter.input.target_address(), *index) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        gas!(
            interpreter,
            gas::sload_cost(interpreter.runtime_flag.spec_id(), value.is_cold)
        );
        *index = value.data;
    }
    *)
    Definition sload (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn_top",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let index := M.copy (| γ1_1 |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "sload",
                                []
                              |),
                              [
                                M.read (| host |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::InputsTrait",
                                    Ty.associated,
                                    [],
                                    "target_address",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "input"
                                    |)
                                  ]
                                |);
                                M.read (| M.read (| index |) |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let value := M.copy (| γ0_0 |) in
                                let~ _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "revm_interpreter::gas::Gas",
                                                      "record_cost",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                          Ty.associated,
                                                          [],
                                                          "gas",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| interpreter |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "revm_interpreter::gas::calc::sload_cost",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                                              Ty.associated,
                                                              [],
                                                              "spec_id",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| interpreter |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "runtime_flag"
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              value,
                                                              "revm_context_interface::journaled_state::StateLoad",
                                                              "is_cold"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated,
                                                        [],
                                                        "set_instruction_result",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| interpreter |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ :=
                                  M.write (|
                                    M.read (| index |),
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        value,
                                        "revm_context_interface::journaled_state::StateLoad",
                                        "data"
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_sload : M.IsFunction "revm_interpreter::instructions::host::sload" sload.
    
    (*
    pub fn sstore<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        require_non_staticcall!(interpreter);
    
        popn!([index, value], interpreter);
        let Some(state_load) = host.sstore(interpreter.input.target_address(), index, value) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
    
        // EIP-1706 Disable SSTORE with gasleft lower than call stipend
        if interpreter.runtime_flag.spec_id().is_enabled_in(ISTANBUL)
            && interpreter.control.gas().remaining() <= CALL_STIPEND
        {
            interpreter
                .control
                .set_instruction_result(InstructionResult::ReentrancySentryOOG);
            return;
        }
        gas!(
            interpreter,
            gas::sstore_cost(
                interpreter.runtime_flag.spec_id(),
                &state_load.data,
                state_load.is_cold
            )
        );
    
        interpreter.control.gas().record_refund(gas::sstore_refund(
            interpreter.runtime_flag.spec_id(),
            &state_load.data,
        ));
    }
    *)
    Definition sstore (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::RuntimeFlag",
                                    Ty.associated,
                                    [],
                                    "is_static",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "runtime_flag"
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StateChangeDuringStaticCall"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let index := M.copy (| γ1_0 |) in
                        let value := M.copy (| γ1_1 |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "sstore",
                                []
                              |),
                              [
                                M.read (| host |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::InputsTrait",
                                    Ty.associated,
                                    [],
                                    "target_address",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "input"
                                    |)
                                  ]
                                |);
                                M.read (| index |);
                                M.read (| value |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let state_load := M.copy (| γ0_0 |) in
                                let~ _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                LogicalOp.and (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "revm_specification::hardfork::SpecId",
                                                      "is_enabled_in",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                                          Ty.associated,
                                                          [],
                                                          "spec_id",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| interpreter |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "runtime_flag"
                                                          |)
                                                        ]
                                                      |);
                                                      Value.StructTuple
                                                        "revm_specification::hardfork::SpecId::ISTANBUL"
                                                        []
                                                    ]
                                                  |),
                                                  ltac:(M.monadic
                                                    (BinOp.le (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "revm_interpreter::gas::Gas",
                                                          "remaining",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::LoopControl",
                                                              Ty.associated,
                                                              [],
                                                              "gas",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| interpreter |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "control"
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |),
                                                      M.read (|
                                                        M.get_constant (|
                                                          "revm_interpreter::gas::constants::CALL_STIPEND"
                                                        |)
                                                      |)
                                                    |)))
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated,
                                                        [],
                                                        "set_instruction_result",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| interpreter |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::ReentrancySentryOOG"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "revm_interpreter::gas::Gas",
                                                      "record_cost",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                          Ty.associated,
                                                          [],
                                                          "gas",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| interpreter |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "revm_interpreter::gas::calc::sstore_cost",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                                              Ty.associated,
                                                              [],
                                                              "spec_id",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| interpreter |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "runtime_flag"
                                                              |)
                                                            ]
                                                          |);
                                                          M.SubPointer.get_struct_record_field (|
                                                            state_load,
                                                            "revm_context_interface::journaled_state::StateLoad",
                                                            "data"
                                                          |);
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              state_load,
                                                              "revm_context_interface::journaled_state::StateLoad",
                                                              "is_cold"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated,
                                                        [],
                                                        "set_instruction_result",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| interpreter |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "revm_interpreter::gas::Gas",
                                        "record_refund",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "revm_interpreter::interpreter_types::LoopControl",
                                            Ty.associated,
                                            [],
                                            "gas",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| interpreter |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "control"
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          M.get_function (|
                                            "revm_interpreter::gas::calc::sstore_refund",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::RuntimeFlag",
                                                Ty.associated,
                                                [],
                                                "spec_id",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "runtime_flag"
                                                |)
                                              ]
                                            |);
                                            M.SubPointer.get_struct_record_field (|
                                              state_load,
                                              "revm_context_interface::journaled_state::StateLoad",
                                              "data"
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_sstore : M.IsFunction "revm_interpreter::instructions::host::sstore" sstore.
    
    (*
    pub fn tstore<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, CANCUN);
        require_non_staticcall!(interpreter);
        gas!(interpreter, gas::WARM_STORAGE_READ_COST);
    
        popn!([index, value], interpreter);
    
        host.tstore(interpreter.input.target_address(), index, value);
    }
    *)
    Definition tstore (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated,
                                          [],
                                          "spec_id",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "runtime_flag"
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::CANCUN"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::RuntimeFlag",
                                    Ty.associated,
                                    [],
                                    "is_static",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "runtime_flag"
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StateChangeDuringStaticCall"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::WARM_STORAGE_READ_COST"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let index := M.copy (| γ1_0 |) in
                        let value := M.copy (| γ1_1 |) in
                        let~ _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "tstore",
                                []
                              |),
                              [
                                M.read (| host |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::InputsTrait",
                                    Ty.associated,
                                    [],
                                    "target_address",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "input"
                                    |)
                                  ]
                                |);
                                M.read (| index |);
                                M.read (| value |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_tstore : M.IsFunction "revm_interpreter::instructions::host::tstore" tstore.
    
    (*
    pub fn tload<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, CANCUN);
        gas!(interpreter, gas::WARM_STORAGE_READ_COST);
    
        popn_top!([], index, interpreter);
    
        *index = host.tload(interpreter.input.target_address(), *index);
    }
    *)
    Definition tload (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated,
                                          [],
                                          "spec_id",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "runtime_flag"
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::CANCUN"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::WARM_STORAGE_READ_COST"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn_top",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let index := M.copy (| γ1_1 |) in
                        let~ _ :=
                          M.write (|
                            M.read (| index |),
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "tload",
                                []
                              |),
                              [
                                M.read (| host |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::InputsTrait",
                                    Ty.associated,
                                    [],
                                    "target_address",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "input"
                                    |)
                                  ]
                                |);
                                M.read (| M.read (| index |) |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_tload : M.IsFunction "revm_interpreter::instructions::host::tload" tload.
    
    (*
    pub fn log<const N: usize, H: Host + ?Sized>(
        interpreter: &mut Interpreter<impl InterpreterTypes>,
        host: &mut H,
    ) {
        require_non_staticcall!(interpreter);
    
        popn!([offset, len], interpreter);
        let len = as_usize_or_fail!(interpreter, len);
        gas_or_fail!(interpreter, gas::log_cost(N as u8, len as u64));
        let data = if len == 0 {
            Bytes::new()
        } else {
            let offset = as_usize_or_fail!(interpreter, offset);
            resize_memory!(interpreter, offset, len);
            Bytes::copy_from_slice(interpreter.memory.slice_len(offset, len).as_ref())
        };
        if interpreter.stack.len() < N {
            interpreter
                .control
                .set_instruction_result(InstructionResult::StackUnderflow);
            return;
        }
        let Some(topics) = interpreter.stack.popn::<N>() else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::StackUnderflow);
            return;
        };
    
        let log = Log {
            address: interpreter.input.target_address(),
            data: LogData::new(topics.into_iter().map(B256::from).collect(), data)
                .expect("LogData should have <=4 topics"),
        };
    
        host.log(log);
    }
    *)
    Definition log (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ N ], [ H; impl_InterpreterTypes ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::RuntimeFlag",
                                    Ty.associated,
                                    [],
                                    "is_static",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "runtime_flag"
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StateChangeDuringStaticCall"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let offset := M.copy (| γ1_0 |) in
                        let len := M.copy (| γ1_1 |) in
                        let~ len :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "as_limbs",
                                    []
                                  |),
                                  [ len ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    let~ _ :=
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    BinOp.bit_or
                                                      (BinOp.bit_or
                                                        (BinOp.bit_or
                                                          (BinOp.gt (|
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.read (| x |),
                                                                M.alloc (|
                                                                  Value.Integer IntegerKind.Usize 0
                                                                |)
                                                              |)
                                                            |),
                                                            M.rust_cast
                                                              (M.read (|
                                                                M.get_constant (|
                                                                  "core::num::MAX"
                                                                |)
                                                              |))
                                                          |))
                                                          (BinOp.ne (|
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.read (| x |),
                                                                M.alloc (|
                                                                  Value.Integer IntegerKind.Usize 1
                                                                |)
                                                              |)
                                                            |),
                                                            Value.Integer IntegerKind.U64 0
                                                          |)))
                                                        (BinOp.ne (|
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.read (| x |),
                                                              M.alloc (|
                                                                Value.Integer IntegerKind.Usize 2
                                                              |)
                                                            |)
                                                          |),
                                                          Value.Integer IntegerKind.U64 0
                                                        |)))
                                                      (BinOp.ne (|
                                                        M.read (|
                                                          M.SubPointer.get_array_field (|
                                                            M.read (| x |),
                                                            M.alloc (|
                                                              Value.Integer IntegerKind.Usize 3
                                                            |)
                                                          |)
                                                        |),
                                                        Value.Integer IntegerKind.U64 0
                                                      |))
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                            Ty.associated,
                                                            [],
                                                            "set_instruction_result",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| interpreter |),
                                                              "revm_interpreter::interpreter::Interpreter",
                                                              "control"
                                                            |);
                                                            Value.StructTuple
                                                              "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                              []
                                                          ]
                                                        |)
                                                      |) in
                                                    M.return_ (| Value.Tuple [] |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (|
                                      M.rust_cast
                                        (M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.read (| x |),
                                            M.alloc (| Value.Integer IntegerKind.Usize 0 |)
                                          |)
                                        |))
                                    |)))
                              ]
                            |)
                          |) in
                        let~ _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_function (| "revm_interpreter::gas::calc::log_cost", [] |),
                                [
                                  M.rust_cast
                                    (M.read (|
                                      M.get_constant (|
                                        "revm_interpreter::instructions::host::log::N"
                                      |)
                                    |));
                                  M.rust_cast (M.read (| len |))
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let gas_used := M.copy (| γ0_0 |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "revm_interpreter::gas::Gas",
                                                      "record_cost",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                          Ty.associated,
                                                          [],
                                                          "gas",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| interpreter |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (| gas_used |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated,
                                                        [],
                                                        "set_instruction_result",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| interpreter |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated,
                                                [],
                                                "set_instruction_result",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)))
                            ]
                          |) in
                        let~ data :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          BinOp.eq (|
                                            M.read (| len |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "alloy_primitives::bytes_::Bytes",
                                          "new",
                                          []
                                        |),
                                        []
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let~ offset :=
                                      M.copy (|
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "ruint::Uint")
                                                  [
                                                    Value.Integer IntegerKind.Usize 256;
                                                    Value.Integer IntegerKind.Usize 4
                                                  ]
                                                  [],
                                                "as_limbs",
                                                []
                                              |),
                                              [ offset ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let x := M.copy (| γ |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                BinOp.bit_or
                                                                  (BinOp.bit_or
                                                                    (BinOp.bit_or
                                                                      (BinOp.gt (|
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.read (| x |),
                                                                            M.alloc (|
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0
                                                                            |)
                                                                          |)
                                                                        |),
                                                                        M.rust_cast
                                                                          (M.read (|
                                                                            M.get_constant (|
                                                                              "core::num::MAX"
                                                                            |)
                                                                          |))
                                                                      |))
                                                                      (BinOp.ne (|
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.read (| x |),
                                                                            M.alloc (|
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            |)
                                                                          |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      |)))
                                                                    (BinOp.ne (|
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.read (| x |),
                                                                          M.alloc (|
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          |)
                                                                        |)
                                                                      |),
                                                                      Value.Integer
                                                                        IntegerKind.U64
                                                                        0
                                                                    |)))
                                                                  (BinOp.ne (|
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.read (| x |),
                                                                        M.alloc (|
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            3
                                                                        |)
                                                                      |)
                                                                    |),
                                                                    Value.Integer IntegerKind.U64 0
                                                                  |))
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                                        Ty.associated,
                                                                        [],
                                                                        "set_instruction_result",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| interpreter |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "control"
                                                                        |);
                                                                        Value.StructTuple
                                                                          "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.return_ (| Value.Tuple [] |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.alloc (|
                                                  M.rust_cast
                                                    (M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.read (| x |),
                                                        M.alloc (|
                                                          Value.Integer IntegerKind.Usize 0
                                                        |)
                                                      |)
                                                    |))
                                                |)))
                                          ]
                                        |)
                                      |) in
                                    let~ words_num :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "revm_interpreter::interpreter::shared_memory::num_words",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "usize",
                                                "saturating_add",
                                                []
                                              |),
                                              [ M.read (| offset |); M.read (| len |) ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let~ _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "revm_interpreter::gas::Gas",
                                              "record_memory_expansion",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                  Ty.associated,
                                                  [],
                                                  "gas",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| interpreter |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                ]
                                              |);
                                              M.read (| words_num |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "revm_interpreter::gas::MemoryExtensionResult::Extended"
                                                |) in
                                              let~ _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::MemoryTrait",
                                                      Ty.associated,
                                                      [],
                                                      "resize",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| interpreter |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "memory"
                                                      |);
                                                      BinOp.Wrap.mul (|
                                                        M.read (| words_num |),
                                                        Value.Integer IntegerKind.Usize 32
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "revm_interpreter::gas::MemoryExtensionResult::OutOfGas"
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                            Ty.associated,
                                                            [],
                                                            "set_instruction_result",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| interpreter |),
                                                              "revm_interpreter::interpreter::Interpreter",
                                                              "control"
                                                            |);
                                                            Value.StructTuple
                                                              "revm_interpreter::instruction_result::InstructionResult::MemoryOOG"
                                                              []
                                                          ]
                                                        |)
                                                      |) in
                                                    M.return_ (| Value.Tuple [] |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "revm_interpreter::gas::MemoryExtensionResult::Same"
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "alloy_primitives::bytes_::Bytes",
                                          "copy_from_slice",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::AsRef",
                                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                              "as_ref",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.associated,
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::MemoryTrait",
                                                        Ty.associated,
                                                        [],
                                                        "slice_len",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| interpreter |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "memory"
                                                        |);
                                                        M.read (| offset |);
                                                        M.read (| len |)
                                                      ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)))
                              ]
                            |)
                          |) in
                        let~ _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.lt (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::StackTrait",
                                              Ty.associated,
                                              [],
                                              "len",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| interpreter |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "stack"
                                              |)
                                            ]
                                          |),
                                          M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::instructions::host::log::N"
                                            |)
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated,
                                                [],
                                                "set_instruction_result",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::StackUnderflow"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::StackTrait",
                                Ty.associated,
                                [],
                                "popn",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| interpreter |),
                                  "revm_interpreter::interpreter::Interpreter",
                                  "stack"
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let topics := M.copy (| γ0_0 |) in
                                let~ log :=
                                  M.alloc (|
                                    Value.StructRecord
                                      "alloy_primitives::log::Log"
                                      [
                                        ("address",
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::InputsTrait",
                                              Ty.associated,
                                              [],
                                              "target_address",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| interpreter |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "input"
                                              |)
                                            ]
                                          |));
                                        ("data",
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "alloy_primitives::log::LogData" ],
                                              "expect",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "alloy_primitives::log::LogData",
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::array::iter::IntoIter")
                                                            [ N ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "alloy_primitives::bits::fixed::FixedBytes")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [])
                                                        ],
                                                      [],
                                                      "collect",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloy_primitives::bits::fixed::FixedBytes")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::array::iter::IntoIter")
                                                            [ N ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ],
                                                          [],
                                                          "map",
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloy_primitives::bits::fixed::FixedBytes")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [];
                                                            Ty.function
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "ruint::Uint")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      256;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  []
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "alloy_primitives::bits::fixed::FixedBytes")
                                                                [ Value.Integer IntegerKind.Usize 32
                                                                ]
                                                                [])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ N ]
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "ruint::Uint")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        256;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                    []
                                                                ],
                                                              [],
                                                              "into_iter",
                                                              []
                                                            |),
                                                            [ M.read (| topics |) ]
                                                          |);
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloy_primitives::bits::fixed::FixedBytes")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ],
                                                            "from",
                                                            []
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| data |)
                                                ]
                                              |);
                                              M.read (|
                                                Value.String "LogData should have <=4 topics"
                                              |)
                                            ]
                                          |))
                                      ]
                                  |) in
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_context_interface::host::Host",
                                        H,
                                        [],
                                        "log",
                                        []
                                      |),
                                      [ M.read (| host |); M.read (| log |) ]
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_log : M.IsFunction "revm_interpreter::instructions::host::log" log.
    
    (*
    pub fn selfdestruct<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        require_non_staticcall!(interpreter);
        popn!([target], interpreter);
        let target = target.into_address();
        let Some(res) = host.selfdestruct(interpreter.input.target_address(), target) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
    
        // EIP-3529: Reduction in refunds
        if !interpreter.runtime_flag.spec_id().is_enabled_in(LONDON) && !res.previously_destroyed {
            interpreter.control.gas().record_refund(gas::SELFDESTRUCT)
        }
        gas!(
            interpreter,
            gas::selfdestruct_cost(interpreter.runtime_flag.spec_id(), res)
        );
    
        interpreter
            .control
            .set_instruction_result(InstructionResult::SelfDestruct);
    }
    *)
    Definition selfdestruct (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::RuntimeFlag",
                                    Ty.associated,
                                    [],
                                    "is_static",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "runtime_flag"
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StateChangeDuringStaticCall"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated,
                        [],
                        "popn",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| interpreter |),
                          "revm_interpreter::interpreter::Interpreter",
                          "stack"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let target := M.copy (| γ1_0 |) in
                        let~ target :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_interpreter::instructions::utility::IntoAddress",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "into_address",
                                []
                              |),
                              [ M.read (| target |) ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "revm_context_interface::host::Host",
                                H,
                                [],
                                "selfdestruct",
                                []
                              |),
                              [
                                M.read (| host |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::InputsTrait",
                                    Ty.associated,
                                    [],
                                    "target_address",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| interpreter |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "input"
                                    |)
                                  ]
                                |);
                                M.read (| target |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let res := M.copy (| γ0_0 |) in
                                let~ _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                LogicalOp.and (|
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "revm_specification::hardfork::SpecId",
                                                        "is_enabled_in",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "revm_interpreter::interpreter_types::RuntimeFlag",
                                                            Ty.associated,
                                                            [],
                                                            "spec_id",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| interpreter |),
                                                              "revm_interpreter::interpreter::Interpreter",
                                                              "runtime_flag"
                                                            |)
                                                          ]
                                                        |);
                                                        Value.StructTuple
                                                          "revm_specification::hardfork::SpecId::LONDON"
                                                          []
                                                      ]
                                                    |)
                                                  |),
                                                  ltac:(M.monadic
                                                    (UnOp.not (|
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "revm_context_interface::journaled_state::StateLoad")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "revm_context_interface::host::SelfDestructResult"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ res ]
                                                          |),
                                                          "revm_context_interface::host::SelfDestructResult",
                                                          "previously_destroyed"
                                                        |)
                                                      |)
                                                    |)))
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "revm_interpreter::gas::Gas",
                                                "record_refund",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                    Ty.associated,
                                                    [],
                                                    "gas",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| interpreter |),
                                                      "revm_interpreter::interpreter::Interpreter",
                                                      "control"
                                                    |)
                                                  ]
                                                |);
                                                M.read (|
                                                  M.get_constant (|
                                                    "revm_interpreter::gas::constants::SELFDESTRUCT"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "revm_interpreter::gas::Gas",
                                                      "record_cost",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                          Ty.associated,
                                                          [],
                                                          "gas",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| interpreter |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "revm_interpreter::gas::calc::selfdestruct_cost",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                                              Ty.associated,
                                                              [],
                                                              "spec_id",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| interpreter |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "runtime_flag"
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (| res |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated,
                                                        [],
                                                        "set_instruction_result",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| interpreter |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::SelfDestruct"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_selfdestruct :
      M.IsFunction "revm_interpreter::instructions::host::selfdestruct" selfdestruct.
  End host.
End instructions.
