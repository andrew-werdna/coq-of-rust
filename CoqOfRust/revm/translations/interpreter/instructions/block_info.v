(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instructions.
  Module block_info.
    (*
    pub fn chainid<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, ISTANBUL);
        gas!(interpreter, gas::BASE);
        push!(interpreter, U256::from(host.cfg().chain_id()));
    }
    *)
    Definition chainid (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated,
                                          [],
                                          "spec_id",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "runtime_flag"
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::ISTANBUL"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BASE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated,
                                      [],
                                      "push",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| interpreter |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "from",
                                          [ Ty.path "u64" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_context_interface::cfg::Cfg",
                                              Ty.associated,
                                              [],
                                              "chain_id",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_context_interface::cfg::CfgGetter",
                                                  H,
                                                  [],
                                                  "cfg",
                                                  []
                                                |),
                                                [ M.read (| host |) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_chainid :
      M.IsFunction "revm_interpreter::instructions::block_info::chainid" chainid.
    
    (*
    pub fn coinbase<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        gas!(interpreter, gas::BASE);
        push!(interpreter, host.block().beneficiary().into_word().into());
    }
    *)
    Definition coinbase (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BASE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated,
                                      [],
                                      "push",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| interpreter |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply
                                            (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [],
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ],
                                          "into",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "alloy_primitives::bits::address::Address",
                                              "into_word",
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "revm_context_interface::block::Block",
                                                    Ty.associated,
                                                    [],
                                                    "beneficiary",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_context_interface::block::BlockGetter",
                                                        H,
                                                        [],
                                                        "block",
                                                        []
                                                      |),
                                                      [ M.read (| host |) ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_coinbase :
      M.IsFunction "revm_interpreter::instructions::block_info::coinbase" coinbase.
    
    (*
    pub fn timestamp<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        gas!(interpreter, gas::BASE);
        push!(interpreter, U256::from(host.block().timestamp()));
    }
    *)
    Definition timestamp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BASE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated,
                                      [],
                                      "push",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| interpreter |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "from",
                                          [ Ty.path "u64" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_context_interface::block::Block",
                                              Ty.associated,
                                              [],
                                              "timestamp",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_context_interface::block::BlockGetter",
                                                  H,
                                                  [],
                                                  "block",
                                                  []
                                                |),
                                                [ M.read (| host |) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_timestamp :
      M.IsFunction "revm_interpreter::instructions::block_info::timestamp" timestamp.
    
    (*
    pub fn block_number<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        gas!(interpreter, gas::BASE);
        push!(interpreter, U256::from(host.block().number()));
    }
    *)
    Definition block_number (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BASE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated,
                                      [],
                                      "push",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| interpreter |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "from",
                                          [ Ty.path "u64" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_context_interface::block::Block",
                                              Ty.associated,
                                              [],
                                              "number",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_context_interface::block::BlockGetter",
                                                  H,
                                                  [],
                                                  "block",
                                                  []
                                                |),
                                                [ M.read (| host |) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_block_number :
      M.IsFunction "revm_interpreter::instructions::block_info::block_number" block_number.
    
    (*
    pub fn difficulty<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        gas!(interpreter, gas::BASE);
        if interpreter.runtime_flag.spec_id().is_enabled_in(MERGE) {
            // Unwrap is safe as this fields is checked in validation handler.
            push!(
                interpreter,
                (host.block().prevrandao().unwrap()).into_u256()
            );
        } else {
            push!(interpreter, host.block().difficulty());
        }
    }
    *)
    Definition difficulty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BASE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "revm_specification::hardfork::SpecId",
                                  "is_enabled_in",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated,
                                      [],
                                      "spec_id",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| interpreter |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "runtime_flag"
                                      |)
                                    ]
                                  |);
                                  Value.StructTuple "revm_specification::hardfork::SpecId::MERGE" []
                                ]
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::StackTrait",
                                              Ty.associated,
                                              [],
                                              "push",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| interpreter |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "stack"
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_interpreter::instructions::utility::IntoU256",
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloy_primitives::bits::fixed::FixedBytes")
                                                    [ Value.Integer IntegerKind.Usize 32 ]
                                                    [],
                                                  [],
                                                  "into_u256",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloy_primitives::bits::fixed::FixedBytes")
                                                            [ Value.Integer IntegerKind.Usize 32 ]
                                                            []
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_context_interface::block::Block",
                                                          Ty.associated,
                                                          [],
                                                          "prevrandao",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "revm_context_interface::block::BlockGetter",
                                                              H,
                                                              [],
                                                              "block",
                                                              []
                                                            |),
                                                            [ M.read (| host |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated,
                                                [],
                                                "set_instruction_result",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let~ _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::StackTrait",
                                              Ty.associated,
                                              [],
                                              "push",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| interpreter |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "stack"
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_context_interface::block::Block",
                                                  Ty.associated,
                                                  [],
                                                  "difficulty",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "revm_context_interface::block::BlockGetter",
                                                      H,
                                                      [],
                                                      "block",
                                                      []
                                                    |),
                                                    [ M.read (| host |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated,
                                                [],
                                                "set_instruction_result",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| interpreter |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_difficulty :
      M.IsFunction "revm_interpreter::instructions::block_info::difficulty" difficulty.
    
    (*
    pub fn gaslimit<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        gas!(interpreter, gas::BASE);
        push!(interpreter, U256::from(host.block().gas_limit()));
    }
    *)
    Definition gaslimit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BASE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated,
                                      [],
                                      "push",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| interpreter |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "from",
                                          [ Ty.path "u64" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_context_interface::block::Block",
                                              Ty.associated,
                                              [],
                                              "gas_limit",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_context_interface::block::BlockGetter",
                                                  H,
                                                  [],
                                                  "block",
                                                  []
                                                |),
                                                [ M.read (| host |) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_gaslimit :
      M.IsFunction "revm_interpreter::instructions::block_info::gaslimit" gaslimit.
    
    (*
    pub fn basefee<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, LONDON);
        gas!(interpreter, gas::BASE);
        push!(interpreter, U256::from(host.block().basefee()));
    }
    *)
    Definition basefee (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated,
                                          [],
                                          "spec_id",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "runtime_flag"
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::LONDON"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BASE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated,
                                      [],
                                      "push",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| interpreter |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "from",
                                          [ Ty.path "u64" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "revm_context_interface::block::Block",
                                              Ty.associated,
                                              [],
                                              "basefee",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_context_interface::block::BlockGetter",
                                                  H,
                                                  [],
                                                  "block",
                                                  []
                                                |),
                                                [ M.read (| host |) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_basefee :
      M.IsFunction "revm_interpreter::instructions::block_info::basefee" basefee.
    
    (*
    pub fn blob_basefee<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, CANCUN);
        gas!(interpreter, gas::BASE);
        push!(
            interpreter,
            U256::from(host.block().blob_gasprice().unwrap_or_default())
        );
    }
    *)
    Definition blob_basefee (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated,
                                          [],
                                          "spec_id",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "runtime_flag"
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::CANCUN"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated,
                                          [],
                                          "gas",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| interpreter |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.get_constant (|
                                          "revm_interpreter::gas::constants::BASE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated,
                                      [],
                                      "push",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| interpreter |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "from",
                                          [ Ty.path "u128" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "u128" ],
                                              "unwrap_or_default",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_context_interface::block::Block",
                                                  Ty.associated,
                                                  [],
                                                  "blob_gasprice",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "revm_context_interface::block::BlockGetter",
                                                      H,
                                                      [],
                                                      "block",
                                                      []
                                                    |),
                                                    [ M.read (| host |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated,
                                        [],
                                        "set_instruction_result",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| interpreter |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_blob_basefee :
      M.IsFunction "revm_interpreter::instructions::block_info::blob_basefee" blob_basefee.
  End block_info.
End instructions.
