(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module hardfork.
  (*
  Enum SpecId
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "FRONTIER";
          item := StructTuple [];
          discriminant := Some 0;
        };
        {
          name := "FRONTIER_THAWING";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "HOMESTEAD";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "DAO_FORK";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "TANGERINE";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "SPURIOUS_DRAGON";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "BYZANTIUM";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "CONSTANTINOPLE";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "PETERSBURG";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "ISTANBUL";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "MUIR_GLACIER";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "BERLIN";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "LONDON";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "ARROW_GLACIER";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "GRAY_GLACIER";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "MERGE";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "SHANGHAI";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "CANCUN";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "PRAGUE";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "OSAKA";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "LATEST";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_clone_Clone_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_marker_Copy_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_fmt_Debug_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::FRONTIER"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "FRONTIER" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::FRONTIER_THAWING"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "FRONTIER_THAWING" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::HOMESTEAD"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "HOMESTEAD" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::DAO_FORK"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "DAO_FORK" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::TANGERINE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "TANGERINE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "SPURIOUS_DRAGON" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::BYZANTIUM"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "BYZANTIUM" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::CONSTANTINOPLE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "CONSTANTINOPLE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::PETERSBURG"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "PETERSBURG" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::ISTANBUL"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "ISTANBUL" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::MUIR_GLACIER"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "MUIR_GLACIER" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::BERLIN"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "BERLIN" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::LONDON"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "LONDON" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::ARROW_GLACIER"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "ARROW_GLACIER" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::GRAY_GLACIER"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "GRAY_GLACIER" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::MERGE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "MERGE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::SHANGHAI"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "SHANGHAI" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::CANCUN"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "CANCUN" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::PRAGUE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "PRAGUE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::OSAKA"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "OSAKA" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_specification::hardfork::SpecId::LATEST"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "LATEST" |) |)
                          |)
                        |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_default_Default_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic (Value.StructTuple "revm_specification::hardfork::SpecId::LATEST" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_cmp_PartialEq_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_specification::hardfork::SpecId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_specification::hardfork::SpecId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (| BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |) |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_cmp_Eq_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_cmp_PartialOrd_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* PartialOrd *)
    Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_specification::hardfork::SpecId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_specification::hardfork::SpecId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialOrd",
                  Ty.path "u8",
                  [],
                  [ Ty.path "u8" ],
                  "partial_cmp",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_cmp_Ord_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* Ord *)
    Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_specification::hardfork::SpecId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_specification::hardfork::SpecId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], [], "cmp", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_hash_Hash_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_specification::hardfork::SpecId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.path "u8",
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_revm_specification_hardfork_SpecId.
  
  Module Impl_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (* enumn::N *)
    Definition n (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            M.match_operator (|
              value,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 0
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::FRONTIER" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 1
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          Value.StructTuple
                            "revm_specification::hardfork::SpecId::FRONTIER_THAWING"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 2
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::HOMESTEAD" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 3
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::DAO_FORK" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 4
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::TANGERINE" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 5
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          Value.StructTuple
                            "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 6
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::BYZANTIUM" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 7
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          Value.StructTuple
                            "revm_specification::hardfork::SpecId::CONSTANTINOPLE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 8
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::PETERSBURG" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 9
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::ISTANBUL" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 10
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::MUIR_GLACIER" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 11
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::BERLIN" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 12
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::LONDON" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 13
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::ARROW_GLACIER" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 14
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::GRAY_GLACIER" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 15
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::MERGE" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 16
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::SHANGHAI" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 17
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::CANCUN" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 18
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::PRAGUE" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 19
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::OSAKA" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U8 255
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.StructTuple "revm_specification::hardfork::SpecId::LATEST" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_n : M.IsAssociatedFunction Self "n" n.
    (*
        pub fn try_from_u8(spec_id: u8) -> Option<Self> {
            Self::n(spec_id)
        }
    *)
    Definition try_from_u8 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "revm_specification::hardfork::SpecId",
              "n",
              [],
              []
            |),
            [ M.read (| spec_id |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_try_from_u8 : M.IsAssociatedFunction Self "try_from_u8" try_from_u8.
    
    (*
        pub const fn is_enabled_in(self, other: Self) -> bool {
            self as u8 >= other as u8
        }
    *)
    Definition is_enabled_in (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          BinOp.ge (|
            M.cast (Ty.path "u8") (M.read (| self |)),
            M.cast (Ty.path "u8") (M.read (| other |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_is_enabled_in :
      M.IsAssociatedFunction Self "is_enabled_in" is_enabled_in.
  End Impl_revm_specification_hardfork_SpecId.
  
  
  Module name.
    Definition value_FRONTIER : Value.t := M.run ltac:(M.monadic (Value.String "Frontier")).
    
    Definition value_FRONTIER_THAWING : Value.t :=
      M.run ltac:(M.monadic (Value.String "Frontier Thawing")).
    
    Definition value_HOMESTEAD : Value.t := M.run ltac:(M.monadic (Value.String "Homestead")).
    
    Definition value_DAO_FORK : Value.t := M.run ltac:(M.monadic (Value.String "DAO Fork")).
    
    Definition value_TANGERINE : Value.t := M.run ltac:(M.monadic (Value.String "Tangerine")).
    
    Definition value_SPURIOUS_DRAGON : Value.t := M.run ltac:(M.monadic (Value.String "Spurious")).
    
    Definition value_BYZANTIUM : Value.t := M.run ltac:(M.monadic (Value.String "Byzantium")).
    
    Definition value_CONSTANTINOPLE : Value.t :=
      M.run ltac:(M.monadic (Value.String "Constantinople")).
    
    Definition value_PETERSBURG : Value.t := M.run ltac:(M.monadic (Value.String "Petersburg")).
    
    Definition value_ISTANBUL : Value.t := M.run ltac:(M.monadic (Value.String "Istanbul")).
    
    Definition value_MUIR_GLACIER : Value.t := M.run ltac:(M.monadic (Value.String "MuirGlacier")).
    
    Definition value_BERLIN : Value.t := M.run ltac:(M.monadic (Value.String "Berlin")).
    
    Definition value_LONDON : Value.t := M.run ltac:(M.monadic (Value.String "London")).
    
    Definition value_ARROW_GLACIER : Value.t :=
      M.run ltac:(M.monadic (Value.String "Arrow Glacier")).
    
    Definition value_GRAY_GLACIER : Value.t := M.run ltac:(M.monadic (Value.String "Gray Glacier")).
    
    Definition value_MERGE : Value.t := M.run ltac:(M.monadic (Value.String "Merge")).
    
    Definition value_SHANGHAI : Value.t := M.run ltac:(M.monadic (Value.String "Shanghai")).
    
    Definition value_CANCUN : Value.t := M.run ltac:(M.monadic (Value.String "Cancun")).
    
    Definition value_PRAGUE : Value.t := M.run ltac:(M.monadic (Value.String "Prague")).
    
    Definition value_OSAKA : Value.t := M.run ltac:(M.monadic (Value.String "PragueEOF")).
    
    Definition value_LATEST : Value.t := M.run ltac:(M.monadic (Value.String "Latest")).
  End name.
  
  Module Impl_core_convert_From_ref__str_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (*
        fn from(name: &str) -> Self {
            match name {
                name::FRONTIER => Self::FRONTIER,
                name::FRONTIER_THAWING => Self::FRONTIER_THAWING,
                name::HOMESTEAD => Self::HOMESTEAD,
                name::DAO_FORK => Self::DAO_FORK,
                name::TANGERINE => Self::TANGERINE,
                name::SPURIOUS_DRAGON => Self::SPURIOUS_DRAGON,
                name::BYZANTIUM => Self::BYZANTIUM,
                name::CONSTANTINOPLE => Self::CONSTANTINOPLE,
                name::PETERSBURG => Self::PETERSBURG,
                name::ISTANBUL => Self::ISTANBUL,
                name::MUIR_GLACIER => Self::MUIR_GLACIER,
                name::BERLIN => Self::BERLIN,
                name::LONDON => Self::LONDON,
                name::ARROW_GLACIER => Self::ARROW_GLACIER,
                name::GRAY_GLACIER => Self::GRAY_GLACIER,
                name::MERGE => Self::MERGE,
                name::SHANGHAI => Self::SHANGHAI,
                name::CANCUN => Self::CANCUN,
                name::PRAGUE => Self::PRAGUE,
                name::OSAKA => Self::OSAKA,
                name::LATEST => Self::LATEST,
                _ => Self::LATEST,
            }
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ name ] =>
        ltac:(M.monadic
          (let name := M.alloc (| name |) in
          M.read (|
            M.match_operator (|
              name,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Frontier" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::FRONTIER" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.String "Frontier Thawing"
                      |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::FRONTIER_THAWING" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Homestead" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::HOMESTEAD" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "DAO Fork" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::DAO_FORK" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Tangerine" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::TANGERINE" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Spurious" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Byzantium" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::BYZANTIUM" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.String "Constantinople"
                      |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::CONSTANTINOPLE" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.String "Petersburg"
                      |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::PETERSBURG" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Istanbul" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::ISTANBUL" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.String "MuirGlacier"
                      |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::MUIR_GLACIER" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Berlin" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::BERLIN" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "London" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::LONDON" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.String "Arrow Glacier"
                      |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::ARROW_GLACIER" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.String "Gray Glacier"
                      |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::GRAY_GLACIER" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Merge" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::MERGE" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Shanghai" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::SHANGHAI" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Cancun" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::CANCUN" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Prague" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::PRAGUE" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "PragueEOF" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::OSAKA" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_constant_or_break_match (| M.read (| γ |), Value.String "Latest" |) in
                    M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::LATEST" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple "revm_specification::hardfork::SpecId::LATEST" []
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_ref__str_for_revm_specification_hardfork_SpecId.
  
  Module Impl_core_convert_From_revm_specification_hardfork_SpecId_for_ref__str.
    Definition Self : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
    
    (*
        fn from(spec_id: SpecId) -> Self {
            match spec_id {
                SpecId::FRONTIER => name::FRONTIER,
                SpecId::FRONTIER_THAWING => name::FRONTIER_THAWING,
                SpecId::HOMESTEAD => name::HOMESTEAD,
                SpecId::DAO_FORK => name::DAO_FORK,
                SpecId::TANGERINE => name::TANGERINE,
                SpecId::SPURIOUS_DRAGON => name::SPURIOUS_DRAGON,
                SpecId::BYZANTIUM => name::BYZANTIUM,
                SpecId::CONSTANTINOPLE => name::CONSTANTINOPLE,
                SpecId::PETERSBURG => name::PETERSBURG,
                SpecId::ISTANBUL => name::ISTANBUL,
                SpecId::MUIR_GLACIER => name::MUIR_GLACIER,
                SpecId::BERLIN => name::BERLIN,
                SpecId::LONDON => name::LONDON,
                SpecId::ARROW_GLACIER => name::ARROW_GLACIER,
                SpecId::GRAY_GLACIER => name::GRAY_GLACIER,
                SpecId::MERGE => name::MERGE,
                SpecId::SHANGHAI => name::SHANGHAI,
                SpecId::CANCUN => name::CANCUN,
                SpecId::PRAGUE => name::PRAGUE,
                SpecId::OSAKA => name::OSAKA,
                SpecId::LATEST => name::LATEST,
            }
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          M.read (|
            M.match_operator (|
              spec_id,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::FRONTIER" |) in
                    M.get_constant (| "revm_specification::hardfork::name::FRONTIER" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::FRONTIER_THAWING"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::FRONTIER_THAWING" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::HOMESTEAD"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::HOMESTEAD" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::DAO_FORK" |) in
                    M.get_constant (| "revm_specification::hardfork::name::DAO_FORK" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::TANGERINE"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::TANGERINE" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::SPURIOUS_DRAGON" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::BYZANTIUM"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::BYZANTIUM" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::CONSTANTINOPLE"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::CONSTANTINOPLE" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::PETERSBURG"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::PETERSBURG" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::ISTANBUL" |) in
                    M.get_constant (| "revm_specification::hardfork::name::ISTANBUL" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::MUIR_GLACIER"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::MUIR_GLACIER" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::BERLIN" |) in
                    M.get_constant (| "revm_specification::hardfork::name::BERLIN" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::LONDON" |) in
                    M.get_constant (| "revm_specification::hardfork::name::LONDON" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::ARROW_GLACIER"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::ARROW_GLACIER" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "revm_specification::hardfork::SpecId::GRAY_GLACIER"
                      |) in
                    M.get_constant (| "revm_specification::hardfork::name::GRAY_GLACIER" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::MERGE" |) in
                    M.get_constant (| "revm_specification::hardfork::name::MERGE" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::SHANGHAI" |) in
                    M.get_constant (| "revm_specification::hardfork::name::SHANGHAI" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::CANCUN" |) in
                    M.get_constant (| "revm_specification::hardfork::name::CANCUN" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::PRAGUE" |) in
                    M.get_constant (| "revm_specification::hardfork::name::PRAGUE" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::OSAKA" |) in
                    M.get_constant (| "revm_specification::hardfork::name::OSAKA" |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "revm_specification::hardfork::SpecId::LATEST" |) in
                    M.get_constant (| "revm_specification::hardfork::name::LATEST" |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "revm_specification::hardfork::SpecId" ]
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_revm_specification_hardfork_SpecId_for_ref__str.
  
  Module Impl_core_fmt_Display_for_revm_specification_hardfork_SpecId.
    Definition Self : Ty.t := Ty.path "revm_specification::hardfork::SpecId".
    
    (*
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{}", <&'static str>::from( *self))
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.call_closure (|
                M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (| Value.Array [ M.read (| Value.String "" |) ] |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Value.Array
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::rt::Argument",
                                  "new_display",
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                              [],
                                              [ Ty.path "revm_specification::hardfork::SpecId" ],
                                              "from",
                                              [],
                                              []
                                            |),
                                            [ M.read (| M.deref (| M.read (| self |) |) |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_revm_specification_hardfork_SpecId.
End hardfork.
