(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bls12_381.
  Module map_fp2_to_g2.
    Definition value_PRECOMPILE : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            Value.StructTuple
              "revm_precompile::PrecompileWithAddress"
              [
                M.call_closure (|
                  M.get_function (| "revm_precompile::u64_to_address", [], [] |),
                  [
                    M.read (|
                      M.get_constant (| "revm_precompile::bls12_381::map_fp2_to_g2::ADDRESS" |)
                    |)
                  ]
                |);
                (* ReifyFnPointer *)
                M.pointer_coercion
                  (M.get_function (|
                    "revm_precompile::bls12_381::map_fp2_to_g2::map_fp2_to_g2",
                    [],
                    []
                  |))
              ]
          |))).
    
    Definition value_ADDRESS : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 19 |))).
    
    Definition value_BASE_GAS_FEE : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 75000 |))).
    
    (*
    pub(super) fn map_fp2_to_g2(input: &Bytes, gas_limit: u64) -> PrecompileResult {
        if BASE_GAS_FEE > gas_limit {
            return Err(PrecompileError::OutOfGas.into());
        }
    
        if input.len() != PADDED_FP2_LENGTH {
            return Err(PrecompileError::Other(format!(
                "MAP_FP2_TO_G2 input should be {PADDED_FP2_LENGTH} bytes, was {}",
                input.len()
            ))
            .into());
        }
    
        let input_p0_x = remove_padding(&input[..PADDED_FP_LENGTH])?;
        let input_p0_y = remove_padding(&input[PADDED_FP_LENGTH..PADDED_FP2_LENGTH])?;
        let fp2 = check_canonical_fp2(input_p0_x, input_p0_y)?;
    
        let mut p = blst_p2::default();
        // SAFETY: `p` and `fp2` are blst values.
        // Third argument is unused if null.
        unsafe { blst_map_to_g2(&mut p, &fp2, core::ptr::null()) };
    
        let mut p_aff = blst_p2_affine::default();
        // SAFETY: `p_aff` and `p` are blst values.
        unsafe { blst_p2_to_affine(&mut p_aff, &p) };
    
        let out = encode_g2_point(&p_aff);
        Ok(PrecompileOutput::new(BASE_GAS_FEE, out))
    }
    *)
    Definition map_fp2_to_g2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input; gas_limit ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let gas_limit := M.alloc (| gas_limit |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.gt (|
                                  M.read (|
                                    M.get_constant (|
                                      "revm_precompile::bls12_381::map_fp2_to_g2::BASE_GAS_FEE"
                                    |)
                                  |),
                                  M.read (| gas_limit |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "revm_precompile::interface::PrecompileError",
                                          [],
                                          [ Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "revm_precompile::interface::PrecompileError::OutOfGas"
                                            []
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.ne (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "bytes::bytes::Bytes",
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.path "alloy_primitives::bytes_::Bytes",
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.read (| input |) ]
                                      |)
                                    ]
                                  |),
                                  M.read (|
                                    M.get_constant (|
                                      "revm_precompile::bls12_381::utils::PADDED_FP2_LENGTH"
                                    |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "revm_precompile::interface::PrecompileError",
                                          [],
                                          [ Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "revm_precompile::interface::PrecompileError::Other"
                                            [
                                              M.call_closure (|
                                                M.get_function (|
                                                  "core::hint::must_use",
                                                  [],
                                                  [ Ty.path "alloc::string::String" ]
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.read (|
                                                                        Value.String
                                                                          "MAP_FP2_TO_G2 input should be "
                                                                      |);
                                                                      M.read (|
                                                                        Value.String " bytes, was "
                                                                      |)
                                                                    ]
                                                                |);
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    Value.Tuple
                                                                      [
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "bytes::bytes::Bytes",
                                                                              "len",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.path
                                                                                    "alloy_primitives::bytes_::Bytes",
                                                                                  [],
                                                                                  [],
                                                                                  "deref",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [ M.read (| input |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |);
                                                                        M.get_constant (|
                                                                          "revm_precompile::bls12_381::utils::PADDED_FP2_LENGTH"
                                                                        |)
                                                                      ]
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let args :=
                                                                          M.copy (| γ |) in
                                                                        M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  "new_display",
                                                                                  [],
                                                                                  [ Ty.path "usize"
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.SubPointer.get_tuple_field (|
                                                                                      args,
                                                                                      1
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  "new_display",
                                                                                  [],
                                                                                  [ Ty.path "usize"
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.SubPointer.get_tuple_field (|
                                                                                      args,
                                                                                      0
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                        |)))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ input_p0_x :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 48 ]
                                      [ Ty.path "u8" ]
                                  ];
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "revm_precompile::bls12_381::utils::remove_padding",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeTo")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.path "bytes::bytes::Bytes",
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.path "alloy_primitives::bytes_::Bytes",
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.read (| input |) ]
                                        |)
                                      ]
                                    |);
                                    Value.StructRecord
                                      "core::ops::range::RangeTo"
                                      [
                                        ("end_",
                                          M.read (|
                                            M.get_constant (|
                                              "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH"
                                            |)
                                          |))
                                      ]
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_precompile::interface::PrecompileOutput";
                                            Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ input_p0_y :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 48 ]
                                      [ Ty.path "u8" ]
                                  ];
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "revm_precompile::bls12_381::utils::remove_padding",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.path "bytes::bytes::Bytes",
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.path "alloy_primitives::bytes_::Bytes",
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.read (| input |) ]
                                        |)
                                      ]
                                    |);
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start",
                                          M.read (|
                                            M.get_constant (|
                                              "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH"
                                            |)
                                          |));
                                        ("end_",
                                          M.read (|
                                            M.get_constant (|
                                              "revm_precompile::bls12_381::utils::PADDED_FP2_LENGTH"
                                            |)
                                          |))
                                      ]
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_precompile::interface::PrecompileOutput";
                                            Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ fp2 :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "blst::blst_fp2";
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "revm_precompile::bls12_381::g2::check_canonical_fp2",
                                [],
                                []
                              |),
                              [ M.read (| input_p0_x |); M.read (| input_p0_y |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_precompile::interface::PrecompileOutput";
                                            Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ p :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_p2",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "blst::blst_map_to_g2", [], [] |),
                      [
                        p;
                        fp2;
                        M.call_closure (|
                          M.get_function (| "core::ptr::null", [], [ Ty.path "blst::blst_fp2" ] |),
                          []
                        |)
                      ]
                    |)
                  |) in
                let~ p_aff :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_p2_affine",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "blst::blst_p2_to_affine", [], [] |),
                      [ p_aff; p ]
                    |)
                  |) in
                let~ out :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "revm_precompile::bls12_381::g2::encode_g2_point",
                        [],
                        []
                      |),
                      [ p_aff ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "revm_precompile::interface::PrecompileOutput",
                          "new",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.get_constant (|
                              "revm_precompile::bls12_381::map_fp2_to_g2::BASE_GAS_FEE"
                            |)
                          |);
                          M.read (| out |)
                        ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Function_map_fp2_to_g2 :
      M.IsFunction "revm_precompile::bls12_381::map_fp2_to_g2::map_fp2_to_g2" map_fp2_to_g2.
  End map_fp2_to_g2.
End bls12_381.
